#!/usr/bin/python3

"""
Reads the save file, strips out parts that should not be in a new game,
and the writes the data to the same file.
"""

import datetime
import json
import os
import re
import subprocess
import sys

update_date = True

# Project root directory
project_dir = None
# Prefix for assets URL.  https://... or file://....
assets_remote_url=None

def read_xml_ui() :
    file = os.path.join("..", "ui", "main.xml")
    with open(file, "r") as input :
        header = "<!-- include Triumph_TTS\\ui\\main.xml -->\n"
        contents = "".join(input.readlines())
        return header + contents

def read_source_file(file) :
    contents = ""
    with open(file + ".ttslua", "r") as input :
        contents = contents + "----#include " + file + "\n"
        old_dir = os.getcwd()
        new_dir = os.path.dirname(file)
        if new_dir == "" :
            new_dir = "."
        os.chdir(new_dir)
        line = input.readline()
        while line :
            if line.startswith("#include ") :
                (directive,nested_file) = line.split()
                contents = contents + read_source_file(nested_file)
            else:
                contents = contents + line
            line = input.readline()
        contents = contents + "\n----#include " + file + "\n"
        os.chdir(old_dir)
    return contents

def read_source_files() :
    global project_dir
    old_dir = os.getcwd()
    try :
        os.chdir("..")
        project_dir = os.path.basename(os.getcwd())
        os.chdir("..")
        text=read_source_file(os.path.join(project_dir, "main"))
        return text.replace('\r\n', '\n')
    finally:
        os.chdir(old_dir)

def use_file_system_assets() :
    """Should the file system be used for assets? """
    cmd = ["git", "status", "--porcelain=v2", "--branch"]
    with subprocess.Popen(cmd, stdout=subprocess.PIPE) as proc:
        lines=proc.stdout.readlines()
        change_count_line = lines[3].decode("ascii")
        (field_hash, field_ab, ahead, behind) = change_count_line.split()
        if 0 != int(ahead) :
            print("remote not up to date: ", change_count_line )
            return True
        if 0 != int(behind) :
            print("remote not up to date: ", change_count_line )
            return True
        for line in lines[4:] :
            line = line.decode("ascii")
            if line.startswith("?") :
                print("Untracked item: ", line)
                return True
            elif line.startswith("!") :
                pass
            else:
                print("Modified file: ", line)
                return True
    return False

def discover_assets_remote_url() :
    """Set the global variable for the start of the URL for assets."""
    global assets_remote_url
    if use_file_system_assets() :
        c_mount = "/mnt/c/"
        dir = os.path.realpath("..")
        if dir.startswith(c_mount) :
            dir = "/C:/" + dir[len(c_mount):]
        assets_remote_url="file://" + dir  + "/"
        print("Using filesytem for assets: ", assets_remote_url)
        return
    cmd = ["git", "status", "--porcelain=v2", "--branch"]
    with subprocess.Popen(cmd, stdout=subprocess.PIPE) as status_proc:
        line = status_proc.stdout.readline().decode("ascii")
        (field_hash, field_oid, id ) = line.split()
        line = status_proc.stdout.readline().decode("ascii")
        line = status_proc.stdout.readline().decode("ascii")
        (field_hash, branch_stream, upstream) = line.split()
        remote = upstream.split("/")[0]
        with subprocess.Popen(["git", "remote", "get-url", remote], stdout=subprocess.PIPE) as remote_proc:
            url = remote_proc.stdout.readline().decode("ascii").strip()
            github_url = "https://github.com/"
            if not url.startswith(github_url) :
                raise Exception("Remote must be github")
            assets_remote_url = "https://raw.githubusercontent.com/" + url[ len(github_url):-4] + "/" + id + "/"


def asset_url(name) :
    """See if there is an asset with the name.
       If there is return a URL for the asset.
       Otherwise return None.
    """
    global assets_remote_url
    image_dir = os.path.join("..", "assets", "images")
    image_file = os.path.join(image_dir, name + ".png")
    if os.path.exists(image_file) :
        return assets_remote_url + "assets/images/" + name + ".png"
    else:
        #print("No asset: ", image_file)
        pass
    return None


def update_custom_assets(data) :
    custom_assets = data["CustomUIAssets"]
    for asset in custom_assets :
        name = asset['Name']
        url = asset_url(name)
        if url is not None :
            asset['URL'] = url

def get_nickname(obj) :
    """Get the objects nickname.
       @return None if the name is empty, otherwise the name.
    """
    if 'Nickname' in obj :
      nickname = obj['Nickname']
      if nickname is not None and len(nickname) > 0 :
          return nickname
    return None

def unsplit_nested_objects(obj, container_name) :
    if not container_name in obj :
        return
    objects = obj[container_name]
    if objects is None :
        return
    for i in range(0, len(objects)) :
        child = unsplit_object(objects[i])
        if child is not None: 
            objects[i] = child

def unsplit_contained_objects(obj) :
    unsplit_nested_objects(obj, 'ContainedObjects')

def unsplit_child_objects(obj) :
    unsplit_nested_objects(obj, 'ChildObjects')

def unsplit_object(obj) :
    unsplit_contained_objects(obj)
    unsplit_child_objects(obj)
    nickname = get_nickname(obj)
    if nickname is None :
        return None
    object_file = os.path.join("ObjectStates", nickname) 
    if not os.path.exists(object_file) :
        return None
    with open(object_file, "r") as f :
        try :
            new_obj = json.load(f)
            unsplit_contained_objects(new_obj)
            unsplit_child_objects(new_obj)
            return new_obj
        except:
            print("Unable to read file ", object_file)
            raise

def unsplit_object_states(data) :
    """The reverse of splt_save, takes the objects that are on the file system
       and puts them into the json.
    """
    unsplit_nested_objects(data, 'ObjectStates')


def is_not_number(object) :
    if 'Nickname' not in object :
        return True
    if object['Nickname'].startswith("NumberRed ") :
        return False
    if object['Nickname'].startswith("NumberBlue ") :
        return False
    return True

def clean_file(file_name) :
    with open(file_name, "r") as f :
        data = json.load(f)

    if 'LuaScriptState' in data :
      lua_script_state = json.loads(data["LuaScriptState"])
      if 'g_game_settings' in lua_script_state :
          del lua_script_state['g_game_settings']
      data['LuaScriptState']=json.dumps(lua_script_state)

    if 'ObjectStates' in data:
        new_objects = [ x for x in data['ObjectStates'] if is_not_number(x) ]
        data['ObjectStates'] = new_objects

    # Build up the LuaScript from the source files
    data['LuaScript'] = read_source_files()
    data['XmlUI'] = read_xml_ui()

    # Update the build date used in the inital version display
    if update_date :
        script = data['LuaScript']
        today = datetime.date.today()
        date='{:04}{:02}{:02}'.format( today.year, today.month, today.day )
        new_date = 'g_build_date = "' + date + '"\\n'
        new_script = re.sub('g_build_date = "\d+\"\\n', new_date, script)
        data['LuaScript'] = new_script

    unsplit_object_states(data)     

    discover_assets_remote_url()
    update_custom_assets(data)

    with open(file_name, "w") as f :
        f.write(json.dumps(data, indent=4, sort_keys="True"))

if len(sys.argv) > 1 :
    if sys.argv[1] == "--no-date" :
        update_date = False
        sys.argv.remove('--no-date')

if len(sys.argv) == 1:
  clean_file("TS_Save_1.json")
else:
    for file_name in sys.argv[1:] :
        clean_file(file_name)
