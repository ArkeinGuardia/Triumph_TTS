#!/usr/bin/python3

"""
Reads the save file, strips out parts that should not be in a new game,
and the writes the data to the same file.
"""

import datetime
import json
import os
import re
import sys

def read_source_file(file) :
    contents = ""
    with open(file + ".ttslua", "r") as input :
        contents = contents + "----#include " + file + "\n"
        old_dir = os.getcwd()
        new_dir = os.path.dirname(file)
        if new_dir == "" :
            new_dir = "."
        os.chdir(new_dir)
        line = input.readline()
        while line :
            if line.startswith("#include ") :
                (directive,nested_file) = line.split()
                contents = contents + read_source_file(nested_file)
            else:
                contents = contents + line
            line = input.readline()
        contents = contents + "\n----#include " + file + "\n"
        os.chdir(old_dir)
    return contents

def read_source_files() :
    old_dir = os.getcwd()
    try :
        os.chdir("..")
        project_dir = os.path.basename(os.getcwd())
        print("project_dir=", project_dir)
        os.chdir("..")
        text=read_source_file(os.path.join(project_dir, "main"))
        return text.replace('\r\n', '\n')
    finally:
        os.chdir(old_dir)

def is_not_number(object) :
    if 'Nickname' not in object :
        return True
    if object['Nickname'].startswith("NumberRed ") :
        return False
    if object['Nickname'].startswith("NumberBlue ") :
        return False
    return True

def clean_file(file_name) :
    with open(file_name, "r") as f :
        data = json.load(f)

    if 'LuaScriptState' in data :
      lua_script_state = json.loads(data["LuaScriptState"])
      if 'g_game_settings' in lua_script_state :
          del lua_script_state['g_game_settings']
      data['LuaScriptState']=json.dumps(lua_script_state)

    if 'ObjectStates' in data:
        new_objects = [ x for x in data['ObjectStates'] if is_not_number(x) ]
        data['ObjectStates'] = new_objects

    # Build up the LuaScript from the source files
    data['LuaScript'] = read_source_files()

    # Update the build date used in the inital version display
    script = data['LuaScript']
    today = datetime.date.today()
    date='{:04}{:02}{:02}'.format( today.year, today.month, today.day )
    new_date = 'g_build_date = "' + date + '"\\n'
    new_script = re.sub('g_build_date = "\d+\"\\n', new_date, script)
    data['LuaScript'] = new_script

    with open(file_name, "w") as f :
        f.write(json.dumps(data, indent=4, sort_keys="True"))


if len(sys.argv) == 1:
  clean_file("TS_Save_1.json")
else:
    for file_name in sys.argv[1:] :
        clean_file(file_name)

