#!/usr/bin/python3

"""
Reads the save file, strips out parts that should not be in a new game,
and the writes the data to the same file.
"""

import datetime
import hashlib
import json
import os
import re
import subprocess
import sys
import urllib
import urllib.parse
import xml
from slpp import slpp as lua

update_date = True
force_remote = False
force_local = False

# Project root directory
project_dir = None
# Prefix for assets URL.  https://... or file://....
assets_remote_url=None

file_checksums = {}

def getMd5(file_path):
  m = hashlib.md5()
  with open(file_path,'rb') as f:
    line = f.read()
    m.update(line)
  md5code = m.hexdigest()
  return md5code

re_backslash = re.compile("\\\\")
re_multi_slash = re.compile("/+")
def windows_url_fixup(url) :
    """If the URL is for a file use Windows conventions if applicable."""
    windows_prefix = "file:///C:"
    if url.startswith(windows_prefix) :
      url=url[:len(windows_prefix)] + re_backslash.sub("/", url[len(windows_prefix):])
      url=url[:len(windows_prefix)] + re_multi_slash.sub("/", url[len(windows_prefix):])
      url=url[:len(windows_prefix)] + re_multi_slash.sub("\\\\", url[len(windows_prefix):])
      url=urllib.parse.unquote(url)
    return url


def get_nickname(obj) :
    """Get the objects nickname.
       @return None if the name is empty, otherwise the name.
    """
    if 'Nickname' in obj :
      nickname = obj['Nickname']
      if nickname is not None and len(nickname) > 0 :
          return nickname
    return None

def check_xml(file) :
    """Parse the XML file to see that it is well formed.
       throws exception if not a valid XML file.
    """
    xml.dom.minidom.parse(file)

def read_xml_ui() :
    file = os.path.join("..", "ui", "main.xml")
    with open(file, "r") as input :
        header = "<!-- include Triumph_TTS\\ui\\main.xml -->\n"
        contents = "".join(input.readlines())
        return header + contents

def read_source_file(file) :
    contents = ""
    with open(file + ".ttslua", "r") as input :
        contents = contents + "----#include " + file + "\n"
        old_dir = os.getcwd()
        new_dir = os.path.dirname(file)
        if new_dir == "" :
            new_dir = "."
        os.chdir(new_dir)
        line = input.readline()
        while line :
            if line.startswith("#include ") :
                (directive,nested_file) = line.split()
                contents = contents + read_source_file(nested_file)
            else:
                contents = contents + line
            line = input.readline()
        contents = contents + "\n----#include " + file + "\n"
        os.chdir(old_dir)
    return contents

def read_source_files() :
    global project_dir
    old_dir = os.getcwd()
    try :
        os.chdir("..")
        project_dir = os.path.basename(os.getcwd())
        os.chdir("..")
        text=read_source_file(os.path.join(project_dir, "main"))
        return text.replace('\r\n', '\n')
    finally:
        os.chdir(old_dir)

def use_file_system_assets() :
    """Should the file system be used for assets? """
    if force_remote :
        return False
    if force_local :
        return  True
    cmd = ["git", "status", "--porcelain=v2", "--branch"]
    with subprocess.Popen(cmd, stdout=subprocess.PIPE) as proc:
        line = proc.stdout.readline().decode("ascii")
        while line :
            if line.startswith("# branch.oid ") :
                pass
            elif line.startswith("# branch.head ") :
                (field_hash, branch_stream, upstream) = line.split()
                remote = upstream.split("/")[0]
            elif line.startswith("# branch.upstream ") :
                pass
            elif line.startswith("# branch.ab ") :
                (field_hash, field_ab, ahead, behind) = line.split()
                if 0 != int(ahead) :
                    print("remote not up to date: ", line )
                    return True
                if 0 != int(behind) :
                    print("remote not up to date: ", line )
                    return True
            else:
                if line.startswith("?") :
                    print("Untracked item: ", line)
                    #return True
                elif line.startswith("!") :
                    pass
                else:
                    print("Modified file: ", line)
                    return True
            line = proc.stdout.readline().decode("ascii")
    if remote is None :
        print("Not on branch that is on remote repo")
        return True
    return False

def discover_assets_remote_url() :
    """Set the global variable for the start of the URL for assets."""
    global assets_remote_url
    if use_file_system_assets() :
        c_mount = "/mnt/c/"
        dir = os.path.realpath("..")
        if dir.startswith(c_mount) :
            dir = "/C:/" + dir[len(c_mount):]
        assets_remote_url="file://" + dir  + "/"
        print("Using filesytem for assets: ", assets_remote_url)
        return
    cmd = ["git", "status", "--porcelain=v2", "--branch"]
    with subprocess.Popen(cmd, stdout=subprocess.PIPE) as status_proc:
        line = status_proc.stdout.readline().decode("ascii")
        while line :
            if line.startswith("# branch.oid ") :
                (field_hash, field_oid, id ) = line.split()
            elif line.startswith("# branch.head ") :
                pass
            elif line.startswith("# branch.upstream ") :
                (field_hash, branch_stream, upstream) = line.split()
                remote = upstream.split("/")[0]
            elif line.startswith("# branch.ab ") :
                pass
            line = status_proc.stdout.readline().decode("ascii")

    url = subprocess.check_output(["git", "remote", "get-url", remote]).decode("ascii").strip()
    url = url[:-4]
    github_url = "^(https://([^@]*@)?github.com/).*$"
    github_re = re.compile(github_url)
    github_match = github_re.match(url)
    if not github_match :
        raise Exception("Remote must be github")
    print(github_match)
    print("group 0: ", github_match.group(0))
    print("group 1: ", github_match.group(1))
    github_url_len = len(github_match.group(1))
    assets_remote_url = "https://raw.githubusercontent.com/" + url[ github_url_len:] +  "/" + id + "/"
    print("Using github for assets: ", windows_url_fixup(assets_remote_url))

re_asset=re.compile('^.*[/\\\\]assets[/\\\\](.*)$')

def asset_url(old_url) :
    """See if there is a file in the asset directory with the same
       trailing path.
       If there is return a URL for the asset.
       Otherwise return the original URL.
    """
    global assets_remote_url
    m = re_asset.match(old_url)
    if m is None :
        return old_url

    assets_dir = os.path.join("..", "assets")
    asset_file = os.path.join(assets_dir, m.group(1)).replace("\\","/")
    if os.path.exists(asset_file) :
      new_url = file_to_url(asset_file)
      return new_url

    return old_url


def update_custom_assets() :
    """Reads the CustomUIAssets,fixes up URL.
       @return new CustomUIAssets.
    """
    with open("CustomUIAssets", "r") as f :
      custom_assets = json.load(f)
      for asset in custom_assets :
        url = asset_url(asset['URL'])
        if url is not None :
            asset['URL'] = url
    return custom_assets


def file_to_url(file):
    global assets_remote_url
    assert assets_remote_url is not None
    assert file is not None
    root = os.path.realpath("..")
    file_abs = os.path.realpath(file)

    if not os.path.isdir(file_abs):
        # Use a file checksum to check if a URL has already
        # been generated for another file with identical
        # content.  If so then use the previous file so
        # TTS will only download the content once.
        checksum = getMd5(file_abs)
        if checksum in file_checksums :
            file_abs = file_checksums[checksum]
        else:
            file_checksums[checksum] = file_abs

    loc = file_abs[len(root)+1:]
    (loc_dir, loc_file) = os.path.split(loc)
    url = assets_remote_url + loc_dir
    if not url.endswith("/") :
        url = url  + "/"
    url = url + urllib.parse.quote(loc_file)
    url = windows_url_fixup(url)
    if file.endswith("/") and (not url.endswith("/")):
        url = url + "/"
    return url

terrain_dir = os.path.join("..", "assets", "terrain")


def update_custom_mesh_assets(obj)  :
    """Change CustomMesh to use assets from the assets folder where possible"""
    nickname = get_nickname(obj)
    if nickname is None :
        return
    if not 'CustomMesh' in obj :
        return
    custom_mesh = obj['CustomMesh']
    terrain_dir = os.path.join("..", "assets", "terrain")
    terrain_name = os.path.join(terrain_dir, nickname)
    obj_file = terrain_name + ".obj"
    if os.path.exists(obj_file) :
        custom_mesh['MeshURL'] = file_to_url(obj_file)
    for diffuse_extension in ['.jpg', '.png'] :
       diffuse_file = terrain_name + diffuse_extension
       if os.path.exists(diffuse_file) :
        custom_mesh['DiffuseURL'] = file_to_url(diffuse_file)
        break
    custom_mesh['MeshURL'] = asset_url(custom_mesh['MeshURL'])
    custom_mesh['ColliderURL'] = asset_url(custom_mesh['ColliderURL'])
    custom_mesh['DiffuseURL'] = asset_url(custom_mesh['DiffuseURL'])


def unsplit_nested_objects(obj, container_name) :
    if not container_name in obj :
        return
    objects = obj[container_name]
    if objects is None :
        return
    for i in range(0, len(objects)) :
        child = unsplit_object(objects[i])
        if child is not None:
            objects[i] = child

def unsplit_contained_objects(obj) :
    unsplit_nested_objects(obj, 'ContainedObjects')

def unsplit_child_objects(obj) :
    unsplit_nested_objects(obj, 'ChildObjects')

def unsplit_object(obj) :
    unsplit_contained_objects(obj)
    unsplit_child_objects(obj)
    nickname = get_nickname(obj)
    if nickname is None :
        return None
    object_file = os.path.join("ObjectStates", nickname)
    if not os.path.exists(object_file) :
        return None
    with open(object_file, "r") as f :
        try :
            new_obj = json.load(f)
            unsplit_contained_objects(new_obj)
            unsplit_child_objects(new_obj)
            update_custom_mesh_assets(new_obj)
            return new_obj
        except:
            print("Unable to read file ", object_file)
            raise

def unsplit_object_states(data) :
    """The reverse of splt_save, takes the objects that are on the file system
       and puts them into the json.
    """
    unsplit_nested_objects(data, 'ObjectStates')


def is_not_number(object) :
    if 'Nickname' not in object :
        return True
    if object['Nickname'].startswith("NumberRed ") :
        return False
    if object['Nickname'].startswith("NumberBlue ") :
        return False
    return True


def update_assets_ttslua() :
    """Update URLs in assets.ttslua."""

    with open("../assets/assets.ttslua", "r") as f :
        f.readline()
        text = f.read()
        data = lua.decode(text)
        for k in data.keys() :
            v = data[k]
            data[k] = asset_url(v)
    with open("../assets/assets.ttslua", "w") as f :
        f.write("g_assets =\n")
        f.write("{\n")
        for k in data.keys() :
            v = data[k]
            v = windows_url_fixup(v)
            v = v.replace("\\","\\\\")
            f.write('  %s="%s",\n' % (k,v))
        f.write("}\n")


def clean_file(file_name) :
    discover_assets_remote_url()

    update_assets_ttslua()

    with open(file_name, "r") as f :
        data = json.load(f)

    if 'LuaScriptState' in data :
      lua_script_state = json.loads(data["LuaScriptState"])
      if 'g_game_settings' in lua_script_state :
          del lua_script_state['g_game_settings']
      data['LuaScriptState']=json.dumps(lua_script_state)

    if 'ObjectStates' in data:
        new_objects = [ x for x in data['ObjectStates'] if is_not_number(x) ]
        data['ObjectStates'] = new_objects

    # Build up the LuaScript from the source files
    data['LuaScript'] = read_source_files()
    data['XmlUI'] = read_xml_ui()

    # Update the build date used in the inital version display
    if update_date :
        script = data['LuaScript']
        today = datetime.date.today()
        date='{:04}{:02}{:02}'.format( today.year, today.month, today.day )
        new_date = 'g_build_date = "' + date + '"\\n'
        new_script = re.sub('g_build_date = "\d+\"\\n', new_date, script)
        data['LuaScript'] = new_script

    unsplit_object_states(data)

    data['CustomUIAssets'] = update_custom_assets()

    with open(file_name, "w") as f :
        f.write(json.dumps(data, indent=4, sort_keys="True"))

if len(sys.argv) > 1 :
    if sys.argv[1] == "--no-date" :
        update_date = False
        sys.argv.remove('--no-date')

if len(sys.argv) > 1 :
    if sys.argv[1] == "--force-remote" :
        force_remote=True
        sys.argv.remove('--force-remote')

if len(sys.argv) > 1 :
    if sys.argv[1] == "--force-local" :
        force_local=True
        sys.argv.remove('--force-local')

if len(sys.argv) == 1:
  clean_file("TS_Save_1.json")
else:
    for file_name in sys.argv[1:] :
        clean_file(file_name)
