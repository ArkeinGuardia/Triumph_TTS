require("Triumph_TTS/scripts/logic_decorations")

-- is the object a base
function is_base_obj(obj)
  if obj == null then
    return false
  end
  local name = obj.getName()
  if name == null then
    return false
  end
  return str_starts_with(name, "base")
end


-- Get the base definition for a base object.
-- base_obj:  Base object
-- return: base definition or nil.
function get_base_definition_from_base_obj(base_obj)
  if nil == base_obj then
    print_error("base_obj is nil")
    return nil
  end
  local base_definition_name = get_decoration_for_obj(base_obj, "base_definition_name")
  if nil == base_definition_name then
    -- counters like hold the line do not have a base definition
    print_debug("No base definition name for " .. base_obj.getName())
    return nil
  end
  return get_base_definition_from_name(base_definition_name)
end


-- base_obj: base to get data on.
-- return: tool tip data table, or nil
function get_tool_tip_data(base_obj)
  if base_obj == nil then
    return nil
  end
  local base_definition = get_base_definition_from_base_obj(base_obj)
  if base_definition == nil then
    return nil
  end
  local tip_data = base_tool_tips[base_definition.troop_type]
  return tip_data
end


-- Is the base a general for an army.
function is_base_army_general(base_obj)
  return str_has_substr(base_obj.getName(), ' General')
end


function is_camp(base_obj)
  return str_has_substr(base_obj.getName(), 'Camp')
end

function is_war_wagons(base_obj)
  local tip_data = get_tool_tip_data(base_obj)
  if tip_data == nil then
    return false
  end
  return tip_data["is_war_wagons"]
end


-- Return base depth in mm
function get_base_depth_from_base_obj(base_obj)
  local base_definition = get_base_definition_from_base_obj(base_obj)
  if base_definition == nil then
    return nil
  end
  return get_base_depth_from_base_definition(base_definition)
end

-- How far can a base move?
-- base_obj:  Base to examine.
-- return: amount of MU base can move.
function get_tactical_move_distance(base_obj)
  local base_definition = get_base_definition_from_base_obj(base_obj)
  if base_definition == nil then
    return nil
  end
  local base_type = base_definition.troop_type
  local tip_data = base_tool_tips[base_type]
  if tip_data == nil then
    return nil
  end
  return tip_data.tactical_move_distance
end

function are_all_bases_are_at_rest()
  for _, base in pairs(get_all_bases()) do
    if not base.resting then
      return false
    end
  end
  return true
end

function is_base_players(base_obj, player_color)
  local player_color_decoration = get_decoration_for_obj(base_obj, "player_color")
  local match_color
  if nil ~= player_color_decoration then
    match_color = player_color_decoration:lower()
  end
  local result = (player_color == match_color)
  return result
end


function filter_bases_by_player_color(list, player_color)
    local filtered = {}
    for _,obj in ipairs(list) do
      if is_base_players(obj, player_color) then
        table.insert(filtered, obj)
      end
    end
    return filtered
end
