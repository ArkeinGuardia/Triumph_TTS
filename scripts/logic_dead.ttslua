
g_dead_zone_red_name = 'dead zone red'
g_dead_zone_blue_name = 'dead zone blue'
g_army_builder_zone_red_name = 'Army Builder red'
g_army_builder_zone_blue_name = 'Army Builder blue'

function get_red_dead_zone()
  local result = get_object_by_name(g_dead_zone_red_name)
  if result == nil then
    print_error("Unable to find: " .. g_dead_zone_red_name)
  end
  return result
end

function get_blue_dead_zone()
  local result = get_object_by_name(g_dead_zone_blue_name)
  if result == nil then
    print_error("Unable to find: " .. g_dead_zone_blue_name)
  end
  return result
end



local g_updating_zone = {}





function get_army_builder_points_for_troop_type(troop_type)
  local tips = base_tool_tips[troop_type]
  if tips.army_builder_points ~= nil then
    return tips.army_builder_points
  end
  return tips.points
end

function get_army_builder_points_for_base_definition(base_definition)
  local troop_type = base_definition.troop_type
  if base_definition.dismount_as ~= nil then
    local mounted_points = get_army_builder_points_for_troop_type(troop_type)
    local dismounted_def = g_base_definitions[base_definition.dismount_as]
    local dismounted_points = get_army_builder_points_for_troop_type(dismounted_def.troop_type)
    return math.max(mounted_points, dismounted_points)
  end
  if base_definition.charging_camelry or base_definition.armored_camelry then
    return get_army_builder_points_for_troop_type(troop_type) - 1
  end
  if base_definition.plaustrella then
    return get_army_builder_points_for_troop_type(troop_type) + 1
  end
  if base_definition.fortified_camp then
    return 1
  end
  if base_definition.pack_train then
    return 1
  end
  return get_army_builder_points_for_troop_type(troop_type)
end

-- How many points are in the collection of base defintions.
-- Each base object maps to one base definition, therefore the
-- same base definition may be in the collection multiple times.
function get_army_builder_points_for_base_definitions(base_definitions)
  local total_points = 0
  local deployment_dismounting_points = 0
  local mid_battle_dismounting_points = 0
  local nb_mobile_infantry = 0
  local elephant_screen_points = 0
  for _,base_definition in pairs(base_definitions) do
      if base_definition.deployment_dismounting then
        deployment_dismounting_points = 1
      end
      if base_definition.mid_battle_dismounting then
        mid_battle_dismounting_points = 2
      end
      if base_definition.mobile_infantry then
        nb_mobile_infantry = nb_mobile_infantry + 1
      end
      if base_definition.elephant_screen then
        elephant_screen_points = 2
      end
      total_points = total_points + get_army_builder_points_for_base_definition(base_definition)
  end
  total_points = total_points + deployment_dismounting_points
  total_points = total_points + mid_battle_dismounting_points
  total_points = total_points + elephant_screen_points
  if nb_mobile_infantry > 1 then
    total_points = total_points + 1
  end
  return total_points
end

function get_victory_points_for_troop_type(troop_type)
  local tips = base_tool_tips[troop_type]
  if tips.victory_points ~= nil then
    return tips.victory_points
  end
  return tips.points
end


function get_victory_points_for_base_definition(base_definition)
  if base_definition.victory_points then
    return base_definition.victory_points
  end
  local troop_type = base_definition.troop_type
  if base_definition.mid_battle_dismounting then
    local mounted_points = get_army_builder_points_for_troop_type(troop_type)
    local dismounted_def = g_base_definitions[base_definition.dismount_as]
    local dismounted_points = get_army_builder_points_for_troop_type(dismounted_def.troop_type)
    return math.max(mounted_points, dismounted_points)
  end
  if base_definition.dismounted_from ~= nil then
    local mounted_def = g_base_definitions[base_definition.dismounted_from]
    if mounted_def.mid_battle_dismounting then
      return get_victory_points_for_base_definition(mounted_def)
    end
  end
  if base_definition.charging_camelry or base_definition.armored_camelry then
    return 3
  end

  -- if base_definition.dismount_as ~= nil then
  --   local mounted_points = get_army_builder_points_for_troop_type(troop_type)
  --   local dismounted_def = g_base_definitions[base_definition.dismount_as]
  --   local dismounted_points = get_army_builder_points_for_troop_type(dismounted_def.troop_type)
  --   return math.max(mounted_points, dismounted_points)
  -- end
   if base_definition.plaustrella then
     return 4
  end
  -- if base_definition.fortified_camp then
  --   return 1
  -- end
  -- if base_definition.pack_train then
  --   return 1
  -- end
  return get_victory_points_for_troop_type(troop_type)
end


-- How many points are in the collection of base defintions.
-- Each base object maps to one base definition, therefore the
-- same base definition may be in the collection multiple times.
function get_victory_points_for_base_definitions(base_definitions)
  local total_points = 0
  -- local deployment_dismounting_points = 0
  -- local mid_battle_dismounting_points = 0
  -- local nb_mobile_infantry = 0
  -- local elephant_screen_points = 0
  for _,base_definition in pairs(base_definitions) do
      -- if base_definition.deployment_dismounting then
      --   deployment_dismounting_points = 1
      -- end
      -- if base_definition.mid_battle_dismounting then
      --   mid_battle_dismounting_points = 2
      -- end
      -- if base_definition.mobile_infantry then
      --   nb_mobile_infantry = nb_mobile_infantry + 1
      -- end
      -- if base_definition.elephant_screen then
      --   elephant_screen_points = 2
      -- end
      total_points = total_points + get_victory_points_for_base_definition(base_definition)
  end
  -- total_points = total_points + deployment_dismounting_points
  -- total_points = total_points + mid_battle_dismounting_points
  -- total_points = total_points + elephant_screen_points
  -- if nb_mobile_infantry > 1 then
  --   total_points = total_points + 1
  -- end
  return total_points
end


function get_army_builder_points_for_base_objects(base_objs)
  local definitions = {}
  for _,base_obj in pairs(base_objs) do
    local base_definition = get_base_definition_from_base_obj(base_obj)
    table.insert(definitions, base_definition)
  end
  return get_army_builder_points_for_base_definitions(definitions)
end


-- Calculate the number of points for a dead zone
-- bases: Bases that are in the zone
-- return: number of points
function calculate_dead_points(bases)
  return 9999
  -- round up, see battle card Mobile Infantry
--  return math.ceil(calculate_points_for_bases(bases, 8))
end


-- Update the score based on the contents of a dead zone.
-- zone: dead zone that has been modified.
function update_dead_zone_value(zone)
    if zone == nil then
      print_error("zone is nil")
      return
    end

    local name = zone.getName()
    if str_has_substr(name, 'Army') then
        return
    end

    local bases = zone.getObjects()
    local dead =  calculate_dead_points(bases)

    local is_red = false
    if str_has_substr(name, 'red') then
        is_red = true
    end
    local text_id = 'text_dead_'
    local image_id = 'dead_'
    local image_suffix = ''
    if is_red then
        text_id = text_id .. 'red'
        image_id = image_id .. 'red'
        image_suffix = 'r'
    else
        text_id = text_id .. 'blue'
        image_id = image_id .. 'blue'
        image_suffix = 'b'
    end
    UI.setValue(text_id, dead)
    UI.hide(text_id)
    Wait.frames(function ()
        UI.show(text_id)
    end, 1)
    if dead == 0 then
        UI.setAttribute(image_id, 'image', 'skeleton0' .. image_suffix)
    elseif dead == 1 or dead == 2 or dead == 3 or dead == 4 or dead == 5 or dead == 6 or dead == 7 or dead == 8 then
        UI.setAttribute(image_id, 'image', 'skeleton1' .. image_suffix)
    elseif dead == 9 or dead == 10 or dead == 11 or dead == 12 or dead == 13 or dead == 14 or dead == 15 then
        UI.setAttribute(image_id, 'image', 'skeleton2' .. image_suffix)
    elseif dead == 16 or dead == 17 or dead == 18 or dead == 19 then
        UI.setAttribute(image_id, 'image', 'skeleton3' .. image_suffix)
    else
        UI.setAttribute(image_id, 'image', 'skeleton4' .. image_suffix)
    end
    print_debug('Updated dead zone ' .. zone.getName())
    g_updating_zone[zone.getName()] = false
end



function update_dead_zones()
  local red_zone = get_red_dead_zone()
  if red_zone ~= nil then
    update_dead_zone_value(red_zone)
  end
  local blue_zone = get_blue_dead_zone()
  if blue_zone ~= nil then
    update_dead_zone_value(blue_zone)
  end
end

-- Calculate the number of points for an army builder zone
-- bases: Bases that are in the zone
-- return: number of points
function calculate_army_builder_points(bases)
  return 99
  --return calculate_points_for_bases(bases, 0)
end


function update_armyzone_value(zone)
    local name = zone.getName()
    local is_red = false
    if str_has_substr(name, 'dead') then
        return
    end
    if str_has_substr(name, 'red') then
        is_red = true
    end

    local bases = zone.getObjects()
    local armyvalue =  calculate_army_builder_points(bases)

    --local points = tostring(armyvalue)
    local all_objs = getAllObjects()
    for _,obj in ipairs(all_objs) do
        local name = obj.getName()
        if is_red then
            if str_starts_with(name, 'NumberRed ') then
                -- This executes on next frame
                obj.destroy()
            end
        else
            if str_starts_with(name, 'NumberBlue ') then
                -- This executes on next frame
                obj.destroy()
            end
        end
    end
    Wait.frames(function ()
        if is_red then
            spawn_number_red(tostring(armyvalue), { 49.5, 1.5, -12})
        else
            spawn_number_blue(tostring(armyvalue), { 42.75, 1.5, 12})
        end
    end, 1)
    print_debug('Updated army zone ' .. zone.getName())
    g_updating_zone[zone.getName()] = false
end

function callback_zone(zone, name, color)
    print_debug('Dead zone callback ' .. zone.getName())
    if not g_updating_zone[zone.getName()] then
        g_updating_zone[zone.getName()] = true
        Wait.frames(function ()
            update_dead_zone_value(zone)
            update_armyzone_value(zone)
        end, 30)
    else
        print_debug('Ignoring dead callback because already updating')
    end
end

function onObjectEnterScriptingZone(zone, obj)
    if not str_has_substr(obj.getName(), 'base') then
        return
    end
    print_debug(obj.getName() .. ' entered ' .. zone.getName())

    -- If there is an object specific function call it.
    local entry_fn_name = get_decoration_for_obj(zone, 'onObjectEnterScriptingZone')
    if entry_fn_name ~= nil then
      local entry_fn = _G[entry_fn_name]
      if nil ~= entry_fn then
        return entry_fn(zone, obj)
      end
    end

    -- default behaviour
    if not g_updating_zone[zone.getName()] then
        g_updating_zone[zone.getName()] = true
        Wait.frames(function ()
            update_dead_zone_value(zone)
            update_armyzone_value(zone)
        end, 60)
    else
        print_debug('Ignoring dead Enter because already updating')
    end
end

function doOnObjectLeaveScriptingZone(zone, obj)
    if not str_has_substr(obj.getName(), 'base') then
        return
    end
    print_debug(obj.getName() .. ' left ' .. zone.getName())

    -- If there is an object specific function call it.
    local leave_fn_name = get_decoration_for_obj(zone, 'onObjectLeaveScriptingZone')
    if leave_fn_name ~= nil then
      local leave_fn = _G[leave_fn_name]
      if nil ~= leave_fn then
        return leave_fn(zone, obj)
      end
    end

    -- default behaviour
    if not g_updating_zone[zone.getName()] then
        g_updating_zone[zone.getName()] = true
        Wait.frames(function ()
            update_dead_zone_value(zone)
            update_armyzone_value(zone)
        end, 60)
    else
        print_debug('Ignoring dead Leave because already updating')
    end
end

function onObjectLeaveScriptingZone(zone, obj)
  local ok, error = pcall( function() doOnObjectLeaveScriptingZone(zone,obj) end)
  if not ok then
    print_error(error)
  end
end


function is_red_dead_zone(dead_zone)
  local name = dead_zone.getName()
  return name == g_dead_zone_red_name
end

-- Move the bases in the dead zone so they are not colliding with
-- each other
function reorganize_dead_zone(dead_zone)
  local ok
  local error
  ok, error = pcall( function()
    local dead = dead_zone.getObjects()

    local is_red = is_red_dead_zone(dead_zone)
    -- have the unit facing off the board, since they are
    -- running away.
    local rotation = dead_zone.getRotation()
    if is_red then
      rotation['y'] = rotation['y'] + 180
    end

    local row_direction
    if is_red then
      row_direction = 1
    else
      row_direction = -1
    end
    local dead_bounds = dead_zone.getBounds()
    local dead_pos = dead_bounds.center
    -- BEWARE: dead_bounds size is zero, it is not the proper value.
    local side_margin = dead_pos.x - (2 * g_base_width_in_inches * row_direction)
    local top =  dead_pos.z - (row_direction * 2 * g_base_width_in_inches  )
    local bases_per_row = 5
    local row_contents = {}
    local col  = 1
    local row = 1
    for _,obj in pairs(dead) do
      if not is_base_obj(obj) then
        print_important("Only bases should be in casualty area")
      else
        base = obj
        base.setRotation(rotation)
        if (col == 1) and (row == 1) then
            local base_pos = {x=side_margin, y = g_graveyard_y_pos, z=top}
            base.setPosition(base_pos)
        else
          local dir
          local other
          if (row == 1) then
            other = row_contents[col-1]
            dir = "left"
          else
            other = row_contents[col]
            dir = "behind"
          end
          local base_transform = calculate_transform(base)
          local other_transform = calculate_transform(other)
          snap_to_base(base,base_transform,other,other_transform,dir)
        end
        row_contents[col] = base
        if col == 5 then
          col = 1
          row = row + 1
        else
          col = col  + 1
        end
      end
    end
    history_record_delta_snapshot()
    draw_all_gizmos()
  end)
  if not ok then
    print_error("reorganize_dead_zone " .. tostring(error))
  end
end

-- Move the base to the kill scripting zone
function base_killed(base)
  local ok
  local error
  ok, error = pcall( function()
    if base == nil then
      print_error("base is nil")
      return
    end
    local base_name = base.getName()
    local dead_zone
    if is_base_red_player(base) then
      print_info("killed red ", base_name)
      dead_zone = get_red_dead_zone()
    else
      print_info("killed blue ", base_name)
      dead_zone = get_blue_dead_zone()
    end
    if dead_zone == nil then
      return false, "dead zone not found"
    end
    local pos = dead_zone.getBounds().center
    base.setPosition(pos)
    -- If we execute reorganize_dead_zone immediately we get a situation
    -- where the base is not yet in the dead_zone.getObjects()
    Wait.frames(function ()
      reorganize_dead_zone(dead_zone)
    end, 10)
  end)
  if not ok then
    print_error("base_killed error " .. tostring(error))
  end
end
