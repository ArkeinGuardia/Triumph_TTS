
function spawn_dead_zones()
    delete_all_dead_zones()
    Wait.frames(function()
        spawn_dead_zones_after_deletion()
    end, 1)
end

function delete_all_dead_zones()
    local all_objs = getAllObjects()
    for _,obj in ipairs(all_objs) do
        local name = obj.getName()
        if str_starts_with(name, 'dead zone') then
            -- This executes on next frame
            obj.destroy()
        end
        if str_starts_with(name, 'Army Builder') then
            -- This executes on next frame
            obj.destroy()
        end
    end
end

-- Create a scripting zone
-- name: Name of the zone
-- position: Center point of the zone
-- size: size of the zone
-- return: Newly created scripting zone.
function create_zone(name, position, size)
    local zone_spawn = {
        position = position,
        scale = size,
        type = 'ScriptingTrigger',
        callback = 'callback_zone'
    }
    local obj = spawnObject(zone_spawn)
    obj.setName(name)
    return obj
end

g_dead_zones = {}

function spawn_dead_zones_after_deletion()
    g_dead_zones['red'] =create_zone('dead zone red',
                { x = 0, y = 1.6, z = -27 },
                { x = 10, y = 1, z = 10 })
    g_dead_zones['blue'] = create_zone('dead zone blue',
                { x = 0, y = 1.6, z = 27 },
                { x = 10, y = 1, z = 10 })
    create_zone('Army Builder red',
                { x = 75, y = 1.6, z = -25 },
                { x = 10, y = 1, z = 10 })
    create_zone('Army Builder blue',
                { x = 75, y = 1.6, z = 25 },
                { x = 10, y = 1, z = 10 })
end


local g_updating_zone = {}

function update_zone_value(zone)
    local name = zone.getName()
    local is_red = false
    if str_has_substr(name, 'Army') then
        return
    end
    if str_has_substr(name, 'red') then
        is_red = true
    end

    local dead = 0
    local has_double_element = false
    for _,obj in ipairs(zone.getObjects()) do
        local obj_name = obj.getName()
        print_debug('Name is <' .. obj_name .. '>')
        if str_has_substr(obj_name, 'base') then
                dead = dead + 3

            if str_has_substr(obj_name, 'Bow Levy')
               or str_has_substr(obj_name, 'Horde')
               or str_has_substr(obj_name, 'Rabble') then
                dead = dead - 1
            end

            if str_has_substr(obj_name, 'Archers')
               or str_has_substr(obj_name, 'Elite Foot')
               or str_has_substr(obj_name, 'Pavisiers')
               or str_has_substr(obj_name, 'Raiders')
               or str_has_substr(obj_name, 'Spears')
               or str_has_substr(obj_name, 'Cataphracts')
               or str_has_substr(obj_name, 'Chariots')
               or str_has_substr(obj_name, 'Elephants')
               or str_has_substr(obj_name, 'Elite Cavalry')
               or str_has_substr(obj_name, 'HorseBow')
               or str_has_substr(obj_name, 'Javelin Cavalry')
               or str_has_substr(obj_name, 'Knights')then
                dead = dead + 1
            end

            if str_has_substr(obj_name, 'Camp') then
                dead = dead + 5
            end

            if str_has_substr(obj_name, 'Fortified') then
                dead = dead - 7
            end

            if str_has_substr(obj_name, 'Herds') then
                dead = dead - 2
            end

            if str_has_substr(obj_name, 'Mobile') then
                dead = dead - 3.5
            end

            if str_has_substr(obj_name, 'Plaustrella')
               or str_has_substr(obj_name, 'Shower Shooting') then
                dead = dead -2
            end

            if str_has_substr(obj_name, 'Charging Camelry') then
                dead = dead - 4
            end

            if str_has_substr(obj_name, 'Sword Fighting') then
               dead = dead - 3.5
            end

        end

    end

    -- The first double element counts as one additional death
    if has_double_element then
        dead = dead + 1
    end

    local text_id = 'text_dead_'
    local image_id = 'dead_'
    local image_suffix = ''
    if is_red then
        text_id = text_id .. 'red'
        image_id = image_id .. 'red'
        image_suffix = 'r'
    else
        text_id = text_id .. 'blue'
        image_id = image_id .. 'blue'
        image_suffix = 'b'
    end
    UI.setValue(text_id, dead)
    UI.hide(text_id)
    Wait.frames(function ()
        UI.show(text_id)
    end, 1)
    if dead == 0 then
        UI.setAttribute(image_id, 'image', 'skeleton0' .. image_suffix)
    elseif dead == 1 or dead == 2 or dead == 3 or dead == 4 or dead == 5 or dead == 6 or dead == 7 or dead == 8 then
        UI.setAttribute(image_id, 'image', 'skeleton1' .. image_suffix)
    elseif dead == 9 or dead == 10 or dead == 11 or dead == 12 or dead == 13 or dead == 14 or dead == 15 then
        UI.setAttribute(image_id, 'image', 'skeleton2' .. image_suffix)
    elseif dead == 16 or dead == 17 or dead == 18 or dead == 19 then
        UI.setAttribute(image_id, 'image', 'skeleton3' .. image_suffix)
    else
        UI.setAttribute(image_id, 'image', 'skeleton4' .. image_suffix)
    end
    print_debug('Updated dead zone ' .. zone.getName())
    g_updating_zone[zone.getName()] = false
end

function update_armyzone_value(zone)
    local name = zone.getName()
    local is_red = false
    if str_has_substr(name, 'dead') then
        return
    end
    if str_has_substr(name, 'red') then
        is_red = true
    end

    local armyvalue = 0
    local has_double_element = false
    for _,obj in ipairs(zone.getObjects()) do
        local obj_name = obj.getName()
        print_debug('Name is <' .. obj_name .. '>')
        if str_has_substr(obj_name, 'base') then
                armyvalue = armyvalue + 3

            if str_has_substr(obj_name, 'Bow Levy')
               or str_has_substr(obj_name, 'Horde')
               or str_has_substr(obj_name, 'Rabble') then
                armyvalue = armyvalue - 1
            end

            if str_has_substr(obj_name, 'Archers')
               or str_has_substr(obj_name, 'Elite Foot')
               or str_has_substr(obj_name, 'Pavisiers')
               or str_has_substr(obj_name, 'Raiders')
               or str_has_substr(obj_name, 'Spears')
               or str_has_substr(obj_name, 'Cataphracts')
               or str_has_substr(obj_name, 'Chariots')
               or str_has_substr(obj_name, 'Elephants')
               or str_has_substr(obj_name, 'Elite Cavalry')
               or str_has_substr(obj_name, 'HorseBow')
               or str_has_substr(obj_name, 'Javelin Cavalry')
               or str_has_substr(obj_name, 'Knights')then
                armyvalue = armyvalue + 1
            end

            if str_has_substr(obj_name, 'Fortified') then
                armyvalue = armyvalue - 2
            end

            if str_has_substr(obj_name, 'Herds') then
                armyvalue = armyvalue - 2
            end

            if str_has_substr(obj_name, 'Plaustrella')
               or str_has_substr(obj_name, 'Shower Shooting') then
                armyvalue = armyvalue -2
            end

            if str_has_substr(obj_name, 'Charging Camelry') then
                armyvalue = armyvalue - 4
            end

            if str_has_substr(obj_name, 'Sword Fighting') then
                armyvalue = armyvalue - 3.5
            end

        end
    end
    --local points = tostring(armyvalue)
    local all_objs = getAllObjects()
    for _,obj in ipairs(all_objs) do
        local name = obj.getName()
        if is_red then
            if str_starts_with(name, 'NumberRed ') then
                -- This executes on next frame
                obj.destroy()
            end
        else
            if str_starts_with(name, 'NumberBlue ') then
                -- This executes on next frame
                obj.destroy()
            end
        end
    end
    Wait.frames(function ()
        if is_red then
            spawn_number_red(tostring(armyvalue), { 78.2, 1.5, -20.6})
        else
            spawn_number_blue(tostring(armyvalue), { 71.3, 1.5, 20.6})
        end
    end, 1)
    print_debug('Updated army zone ' .. zone.getName())
    g_updating_zone[zone.getName()] = false
end

function callback_zone(zone, name, color)
    print_debug('Dead zone callback ' .. zone.getName())
    if not g_updating_zone[zone.getName()] then
        g_updating_zone[zone.getName()] = true
        Wait.frames(function ()
            update_zone_value(zone)
            update_armyzone_value(zone)
        end, 30)
    else
        print_debug('Ignoring dead callback because already updating')
    end
end

function onObjectEnterScriptingZone(zone, obj)
    if not str_has_substr(obj.getName(), 'base') then
        return
    end
    print_debug(obj.getName() .. ' entered ' .. zone.getName())
    if not g_updating_zone[zone.getName()] then
        g_updating_zone[zone.getName()] = true
        Wait.frames(function ()
            update_zone_value(zone)
            update_armyzone_value(zone)
        end, 60)
    else
        print_debug('Ignoring dead Enter because already updating')
    end
end

function onObjectLeaveScriptingZone(zone, obj)
    if not str_has_substr(obj.getName(), 'base') then
        return
    end
    print_debug(obj.getName() .. ' left ' .. zone.getName())
    if not g_updating_zone[zone.getName()] then
        g_updating_zone[zone.getName()] = true
        Wait.frames(function ()
            update_zone_value(zone)
            update_armyzone_value(zone)
        end, 60)
    else
        print_debug('Ignoring dead Leave because already updating')
    end
end

-- Move the bases in the dead zone so they are not colliding with
-- each other
function reorganize_dead_zone(dead_zone)
  local ok
  local error
  ok, error = pcall( function()
    local dead = dead_zone.getObjects()

    -- have the unit facing off the board, since they are
    -- running away.
    local rotation = dead_zone.getRotation()
    if dead_zone == g_dead_zones['red'] then
      rotation['y'] = rotation['y'] + 180
    end

    local row_direction
    if dead_zone == g_dead_zones['red'] then
      row_direction = 1
    else
      row_direction = -1
    end
    local dead_bounds = dead_zone.getBounds()
    local dead_pos = dead_bounds.center
    -- BEWARE: dead_bounds size is zero, it is not the proper value.
    local side_margin = dead_pos.x - (2 * g_base_width_in_inches * row_direction)
    local top =  dead_pos.z - (row_direction * 2 * g_base_width_in_inches  )
    local bases_per_row = 5
    local row_contents = {}
    local col  = 1
    local row = 1
    for _,obj in pairs(dead) do
      if not is_base_obj(obj) then
        print_important("Only bases should be in casualty area")
      else
        base = obj
        base.setRotation(rotation)
        if (col == 1) and (row == 1) then
            local base_pos = {x=side_margin, y = dead_pos.y, z=top}
            base.setPosition(base_pos)
        else
          local dir
          local other
          if (row == 1) then
            other = row_contents[col-1]
            dir = "left"
          else
            other = row_contents[col]
            dir = "behind"
          end
          local base_transform = calculate_transform(base)
          local other_transform = calculate_transform(other)
          snap_to_base(base,base_transform,other,other_transform,dir)
        end
        row_contents[col] = base
        if col == 5 then
          col = 1
          row = row + 1
        else
          col = col  + 1
        end
      end
    end
    history_record_snapshot()
    draw_all_gizmos()
  end)
  if not ok then
    print_error("reorganize_dead_zone " .. tostring(error))
  end
end

-- Move the base to the kill scripting zone
function base_killed(base)
  local ok
  local error
  ok, error = pcall( function()
    if base == nil then
      print_error("base is nil")
      return
    end
    local base_name = base.getName()
    local dead_zone
    if is_base_red_player(base_name) then
      print_info("killed red ", base_name)
      dead_zone = g_dead_zones['red']
    else
      print_info("killed blue ", base_name)
      dead_zone = g_dead_zones['blue']
    end
    print("dead_zone=", dead_zone)
    local pos = dead_zone.getBounds().center
    print("pos=", pos)
    base.setPosition(pos)
    -- If we execute reorganize_dead_zone immediately we get a situation
    -- where the base is not yet in the dead_zone.getObjects()
    Wait.frames(function ()
      reorganize_dead_zone(dead_zone)
    end, 10)
  end)
  if not ok then
    print_error("base_killed error " .. tostring(error))
  end
end
