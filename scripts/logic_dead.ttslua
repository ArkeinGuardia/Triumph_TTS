
g_dead_zone_red_name = 'dead zone red'
g_dead_zone_blue_name = 'dead zone blue'

function get_red_dead_zone()
  local result = get_object_by_name(g_dead_zone_red_name)
  if result == nil then
    print_error("Unable to find: " .. g_dead_zone_red_name)
  end
  return result
end

function get_blue_dead_zone()
  local result = get_object_by_name(g_dead_zone_blue_name)
  if result == nil then
    print_error("Unable to find: " .. g_dead_zone_blue_name)
  end
  return result
end

function get_red_army_mat()
  local result = get_object_by_name("red army mat")
  if result == nil then
    print_error("Unable to find: red army mat")
  end
  return result
end

function get_blue_army_mat()
  local result = get_object_by_name("blue army mat")
  if result == nil then
    print_error("Unable to find: blue army mat")
  end
  return result
end

function get_red_army_builder_zone()
  -- same zone is used for casulaties and army builder with
  -- state sensitive calculations,
  return get_red_dead_zone()
end

function get_blue_army_builder_zone()
  -- same zone is used for casulaties and army builder with
  -- state sensitive calculations,
  return get_blue_dead_zone()
end


local g_updating_zone = {}





function get_army_builder_points_for_troop_type(troop_type)
  if troop_type == nil then
    print_error("get_army_builder_points_for_troop_type troop_type is nil")
    return nil
  end
  local tips = base_tool_tips[troop_type]
  if tips == nil then
    print_error("Unable to get base_tool_tips for ",troop_type)
    return nil
  end
  if tips.army_builder_points ~= nil then
    return tips.army_builder_points
  end
  if tips.points == nil then
    print_error("Unable to get army build points for troop type " .. tostring(troop_type))
    return nil
  end
  return tips.points
end

function get_army_builder_points_for_base_definition(base_definition)
  local troop_type = base_definition.troop_type
  if base_definition.dismount_as ~= nil then
    local mounted_points = get_army_builder_points_for_troop_type(troop_type)
    local dismounted_def = g_base_definitions[base_definition.dismount_as]
    local dismounted_points = get_army_builder_points_for_troop_type(dismounted_def.troop_type)
    return math.max(mounted_points, dismounted_points)
  end
  if base_definition.fortified_camp then
    return 1
  end
  if base_definition.pack_train then
    return 1
  end
  if base_definition.charging_camelry or base_definition.armored_camelry then
    return get_army_builder_points_for_troop_type(troop_type) - 1
  end
  if base_definition.plaustrella then
    return get_army_builder_points_for_troop_type(troop_type) + 1
  end
  if base_definition.shower_shooting then
    return get_army_builder_points_for_troop_type(troop_type) + 1
  end
  return get_army_builder_points_for_troop_type(troop_type)
end

-- How many points are in the collection of base defintions.
-- Each base object maps to one base definition, therefore the
-- same base definition may be in the collection multiple times.
function get_army_builder_points_for_base_definitions(base_definitions)
  local total_points = 0
  local deployment_dismounting_points = 0
  local mid_battle_dismounting_points = 0
  local nb_mobile_infantry = 0
  local elephant_screen_points = 0
  for _,base_definition in pairs(base_definitions) do
      if base_definition.deployment_dismounting then
        deployment_dismounting_points = 1
      end
      if base_definition.mid_battle_dismounting then
        mid_battle_dismounting_points = 2
      end
      if base_definition.mobile_infantry then
        nb_mobile_infantry = nb_mobile_infantry + 1
      end
      if base_definition.elephant_screen then
        elephant_screen_points = 2
      end
      total_points = total_points + get_army_builder_points_for_base_definition(base_definition)
  end
  total_points = total_points + deployment_dismounting_points
  total_points = total_points + mid_battle_dismounting_points
  total_points = total_points + elephant_screen_points
  if nb_mobile_infantry > 1 then
    total_points = total_points + 1
  end
  return total_points
end

function get_victory_points_for_troop_type(troop_type)
  local tips = base_tool_tips[troop_type]
  if tips.victory_points ~= nil then
    return tips.victory_points
  end
  return tips.points
end


function get_victory_points_for_base_definition(base_definition)
  if base_definition.victory_points then
    return base_definition.victory_points
  end
  local troop_type = base_definition.troop_type
  if base_definition.mid_battle_dismounting then
    local mounted_points = get_army_builder_points_for_troop_type(troop_type)
    local dismounted_def = g_base_definitions[base_definition.dismount_as]
    local dismounted_points = get_army_builder_points_for_troop_type(dismounted_def.troop_type)
    return math.max(mounted_points, dismounted_points)
  end
  if base_definition.dismounted_from ~= nil then
    local mounted_def = g_base_definitions[base_definition.dismounted_from]
    if mounted_def.mid_battle_dismounting then
      return get_victory_points_for_base_definition(mounted_def)
    end
  end
  if base_definition.charging_camelry or base_definition.armored_camelry then
    return 3
  end
   if base_definition.plaustrella then
     return 4
  end
  if base_definition.shower_shooting then
    local type_points = get_victory_points_for_troop_type(troop_type)
    return type_points + 1
  end
  return get_victory_points_for_troop_type(troop_type)
end


-- How many points are in the collection of base defintions.
-- Each base object maps to one base definition, therefore the
-- same base definition may be in the collection multiple times.
function get_victory_points_for_base_definitions(base_definitions)
  local total_points = 0
  for _,base_definition in pairs(base_definitions) do
      total_points = total_points + get_victory_points_for_base_definition(base_definition)
  end
  return total_points
end


function get_army_builder_points_for_base_objects(base_objs)
  local definitions = {}
  for _,base_obj in pairs(base_objs) do
    local base_definition = get_base_definition_from_base_obj(base_obj)
    if base_definition ~= nil then
      table.insert(definitions, base_definition)
    end
  end
  return get_army_builder_points_for_base_definitions(definitions)
end


-- Calculate the number of points for a dead zone
-- objects: objects that are in the zone
-- return: number of points
function calculate_dead_points(objects)
  local definitions = {}
  for _,obj in pairs(objects) do
    if is_base_obj(obj) then
      local base_obj = obj
      local base_definition = get_base_definition_from_base_obj(base_obj)
      if base_definition ~= nil then
        table.insert(definitions, base_definition)
      end
    end
  end
  local result = get_victory_points_for_base_definitions(definitions)
  return result
end

function is_points_zone_red(zone)
  local name = zone.getName()
  local is_red = false
  if str_has_substr(name, 'red') then
      is_red = true
  end
  return is_red
end

-- Update the text for a zone (casualties or army builder role)
-- zone: Zone to update
-- points: Points to display.  String.
function update_points_zone_text(zone, points)
  local is_red = is_points_zone_red(zone)
  local text_id = 'text_dead_'
  if is_red then
      text_id = text_id .. 'red'
  else
      text_id = text_id .. 'blue'
  end
  UI.setValue(text_id, points)
  UI.hide(text_id)
  Wait.frames(function ()
      UI.show(text_id)
  end, 1)
end

-- Reterieve the number of points in the zone.
-- Can be victory points or army builder points
function get_zone_points(zone)
  local objects = zone.getObjects()
  if not g_game_settings['use_army_builder'] then
    local ran,result =  pcall(calculate_dead_points, objects)
    return ran, result
  else
    local ran,result =  pcall(calculate_army_builder_points, objects)
    return ran, result
  end
end

-- Change the skeleton image
-- is_red true to update the read image, false for blue
-- dead Victory points
function update_dead_image(is_red, dead)
  local image_id = 'dead_'
  local image_suffix = ''
  if is_red then
      image_id = image_id .. 'red'
      image_suffix = 'r'
  else
      image_id = image_id .. 'blue'
      image_suffix = 'b'
  end
  if dead == 0 then
      UI.setAttribute(image_id, 'image', 'skeleton0' .. image_suffix)
  elseif dead == 1 or dead == 2 or dead == 3 or dead == 4 or dead == 5 or dead == 6 or dead == 7 or dead == 8 then
      UI.setAttribute(image_id, 'image', 'skeleton1' .. image_suffix)
  elseif dead == 9 or dead == 10 or dead == 11 or dead == 12 or dead == 13 or dead == 14 or dead == 15 then
      UI.setAttribute(image_id, 'image', 'skeleton2' .. image_suffix)
  elseif dead == 16 or dead == 17 or dead == 18 or dead == 19 then
      UI.setAttribute(image_id, 'image', 'skeleton3' .. image_suffix)
  else
      UI.setAttribute(image_id, 'image', 'skeleton4' .. image_suffix)
  end
end

-- Change the recruiting officer image
-- is_red true to update the read image, false for blue
-- points Army points
function update_recruiting_image(is_red, points)
  local image_id = 'recruiter0'
  local image_suffix = ''
  if is_red then
      image_id = image_id .. 'r'
      image_suffix = 'r'
  else
      image_id = image_id .. 'b'
      image_suffix = 'b'
  end
  local image_name = 'recruiting0' .. image_suffix
  UI.setAttribute(image_id, 'image', image_name)
end

function update_points_zone_image(zone, points)
  local is_red = is_points_zone_red(zone)
  if not g_game_settings['use_army_builder'] then
    update_dead_image(is_red, points)
  else
    update_recruiting_image(is_red, points)
  end
end

-- Update the score based on the contents of a zone to
-- display the victory points or the army points.
-- zone:  zone that has been modified.
function update_points_zone_value(zone)
    if zone == nil then
      print_error("zone is nil")
      return
    end

    local ran,result =  get_zone_points(zone)

    if not ran then
      local error = result
      print_error(tostring(error))
      return
    end

    local points = result
    update_points_zone_text(zone, tostring(points))
    update_points_zone_image(zone, points)
    print_debug('Updated zone ' .. zone.getName())
    g_updating_zone[zone.getName()] = false
end



function update_points_zones()
  local red_zone = get_red_dead_zone()
  if red_zone ~= nil then
    update_points_zone_value(red_zone)
  end
  local blue_zone = get_blue_dead_zone()
  if blue_zone ~= nil then
    update_points_zone_value(blue_zone)
  end
end

function get_army_builder_points_for_tokens(token_objs)
  local result = 0
  for _,token_obj in pairs(token_objs) do
    if true == get_decoration_for_obj(token_obj, "token_charge_through") then
      result = result + 1
    end
  end
  return result
end

-- Calculate the number of points for an army builder zone
-- objects: objects that are in the zone
-- return: number of points
function calculate_army_builder_points(objects)
  -- Is this code dead
  local tokens = {}
  local definitions = {}
  for _,obj in pairs(objects) do
    if is_token_obj(obj) then
      table.insert(tokens, obj)
    elseif is_base_obj(obj) then
      local base_obj = obj
      local base_definition = get_base_definition_from_base_obj(base_obj)
      if base_definition ~= nil then
        table.insert(definitions, base_definition)
      end
    end
  end
  local result = get_army_builder_points_for_base_definitions(definitions) +
    get_army_builder_points_for_tokens(tokens)
  return result
end


function callback_zone(zone, name, color)
    if not g_updating_zone[zone.getName()] then
        g_updating_zone[zone.getName()] = true
        Wait.frames(function ()
            update_points_zone_value(zone)
        end, 30)
    else
        print_debug('Ignoring dead callback because already updating')
    end
end

function onObjectEnterScriptingZone(zone, obj)
    if (not is_base_obj(obj)) and (not is_token_obj(obj)) then
        return
    end
    print_debug(obj.getName() .. ' entered ' .. zone.getName())

    -- If there is an object specific function call it.
    local entry_fn_name = get_decoration_for_obj(zone, 'onObjectEnterScriptingZone')
    if entry_fn_name ~= nil then
      local entry_fn = _G[entry_fn_name]
      if nil ~= entry_fn then
        return entry_fn(zone, obj)
      end
    end

    -- default behaviour
    if not g_updating_zone[zone.getName()] then
        g_updating_zone[zone.getName()] = true
        Wait.frames(function ()
            update_points_zone_value(zone)
        end, 60)
    else
        print_debug('Ignoring dead Enter because already updating')
    end
end

function doOnObjectLeaveScriptingZone(zone, obj)
    if (not is_base_obj(obj)) and (not is_token_obj(obj)) then
        return
    end
    print_debug(obj.getName() .. ' left ' .. zone.getName())

    -- If there is an object specific function call it.
    local leave_fn_name = get_decoration_for_obj(zone, 'onObjectLeaveScriptingZone')
    if leave_fn_name ~= nil then
      local leave_fn = _G[leave_fn_name]
      if nil ~= leave_fn then
        return leave_fn(zone, obj)
      end
    end

    -- default behaviour
    if not g_updating_zone[zone.getName()] then
        g_updating_zone[zone.getName()] = true
        Wait.frames(function ()
            update_points_zone_value(zone)
        end, 60)
    else
        print_debug('Ignoring dead Leave because already updating')
    end
end

function onObjectLeaveScriptingZone(zone, obj)
  local ok, error = pcall( function() doOnObjectLeaveScriptingZone(zone,obj) end)
  if not ok then
    print_error(error)
  end
end


function is_red_dead_zone(dead_zone)
  local name = dead_zone.getName()
  return name == g_dead_zone_red_name
end

-- Move the bases in the dead zone so they are not colliding with
-- each other
-- dead_zone:  zone that is the location of all the killed bases
-- for an army.  Used to get the bases in the zone that are to be
-- organized.
-- army_mat: Mat where the models are to be placed.  Used since when
-- getting the bounds of a zone zero is returned for the size.
function reorganize_dead_zone(dead_zone, army_mat)
  local ok
  local error
  ok, error = pcall( function()
    local rotation = army_mat.getRotation()
    local mat_bounds = army_mat.getBounds()
    local theta = math.rad(rotation['y'])
    local corners = compute_corners_coords(
      mat_bounds['size'], theta, mat_bounds['center'])

    local dead = dead_zone.getObjects()

    -- have the unit facing off the board, since they are
    -- running away.
    local rotation = army_mat.getRotation()
    rotation['y'] = rotation['y'] + 180

    -- Amount to add on z acess to go from bottom of mat to the
    -- top of the mat, towards the center of the table
     local row_direction
     if corners['botright']['z'] < corners['topright']['z'] then
       row_direction = 1
     else
       row_direction = -1
     end
     -- Ammount to add to x to move from right corner to left corner
     local col_direction
     if corners['botright']['x'] < corners['botleft']['x'] then
       col_direction = -1
     else
       col_direction = 1
     end


     -- Keep at least a half base width on the sides to make it obvious that
     -- the base is on the mat.
     local bases_per_row = math.floor((mat_bounds['size']['x'] - g_base_width_in_inches) / g_base_width_in_inches)
     local width_used = bases_per_row * g_base_width_in_inches
     -- space not used + 1/2 base width since position is center of base
     local side_margin = col_direction * (mat_bounds['size']['x'] - width_used + g_base_width_in_inches) / 2
     local row_contents = {}
     local col  = 1
     local row = 1

     for _,obj in pairs(dead) do
       if not is_base_obj(obj) then
         print_important("Only bases should be in casualty area")
       else
         base = obj
         base.setRotation(rotation)
         if (col == 1) and (row == 1) then
           local x= corners['botleft']['x']  + side_margin
           -- Extra space for the maximum depth of a base.
           local z= corners['botleft']['z'] + (row_direction * g_base_width_in_inches)
           local base_pos = {
               x=x,
               y = g_graveyard_y_pos,
               z=z}
           base.setPosition(base_pos)
         else
           local dir
           local other
           if (row == 1) then
             other = row_contents[col-1]
             dir = "left"
           else
             other = row_contents[col]
             dir = "behind"
           end
           local base_transform = calculate_transform(base)
           local other_transform = calculate_transform(other)
           snap_to_base(base,base_transform,other,other_transform,dir)
         end
         row_contents[col] = base
         if col == bases_per_row then
           col = 1
           row = row + 1
         else
           col = col  + 1
         end
       end
     end
     history_record_delta_snapshot()
     draw_all_gizmos()
  end)
  if not ok then
    print_error("reorganize_dead_zone " .. tostring(error))
  end
end

-- Move the base to the kill scripting zone
function base_killed(base)
  local ok
  local error
  ok, error = pcall( function()
    if base == nil then
      print_error("base is nil")
      return
    end
    local base_name = base.getName()
    local dead_zone
    local army_mat
    if is_base_red_player(base) then
      print_info("killed red ", base_name)
      dead_zone = get_red_dead_zone()
      army_mat = get_red_army_mat()
    else
      print_info("killed blue ", base_name)
      dead_zone = get_blue_dead_zone()
      army_mat = get_blue_army_mat()
    end
    if dead_zone == nil then
      return false, "dead zone not found"
    end
    if army_mat == nil then
      return false, "army mat not found"
    end
    local pos = dead_zone.getBounds().center
    base.setPosition(pos)
    -- If we execute reorganize_dead_zone immediately we get a situation
    -- where the base is not yet in the dead_zone.getObjects()
    Wait.frames(function ()
      reorganize_dead_zone(dead_zone, army_mat)
    end, 10)
  end)
  if not ok then
    print_error("base_killed error " .. tostring(error))
  end
end
