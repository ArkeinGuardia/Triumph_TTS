
-- Extra information that is to be persisted.
-- key is object GUID, value is a table of the properties for the object.
g_decorations = {}

-- Retrieve a decoration for an object.  A decoration is extra information for the
-- object that is persisted.
-- guid: GUID of the object we are searching for.
-- key: Name of the decoration we are search for, for the object.
-- return: nil if the decoration is not found, otherwise the value.
function get_decoration_for_guid(guid, key)
  if guid == nil then
    return nil
  end
 local decorations = g_decorations[guid]
 if decorations == nil then
   return nil
 end
 local decoration = decorations[key]
 return decoration
end

-- Set a decoration for an object.  A decoration is extra information for the
-- object that is persisted.
-- guid: GUID of the object we are searching for.
-- key: Name of the decoration we are search for, for the object.
-- value: New value of the decoration, nil can be used to remove the
-- decoration.
-- return: true on success, false on failure.
function set_decoration_for_guid(guid, key, value)
  if guid == nil then
    print_error("GUID is nil")
    return false
  end
 if g_decorations[guid] == nil then
   g_decorations[guid] = {}
 end
 g_decorations[guid][key] = value
 return true
end

-- Add an to the list of items.  If the list does not exist a new list
-- is created
-- guid:  GUID of the object being decorated
-- key: Name of the decoration
-- new_item:  Item to add to the list
function add_to_decoration_list_guid(guid, key, new_item)
  local list = get_decoration_for_guid(guid, key)
  if list == nil then
    list = {}
    set_decoration_for_guid(guid, key, list)
  end
  table.insert(list, new_item)
 print("decorations ", guid)
 table_print(g_decorations[guid])
end


function get_decoration_for_obj(obj, key)
  if obj == nil then
    return nil
  end
  local guid = obj.getGUID()
  return get_decoration_for_guid(guid, key)
end

-- Set the decoration for an object
-- obj: Object to decorate
-- key: Name of the decoration
-- value: Value to remember
-- return: true on success, false on failure
function set_decoration_for_obj(obj, key, value)
  if obj == nil then
    print_error("obj is nil")
    return false
  end
  local guid = obj.getGUID()
  local result = set_decoration_for_guid(guid, key, value)
  return result
end

-- Add an to the list of items.  If the list does not exist a new list
-- is created
-- obj:  object being decorated
-- key: Name of the decoration
-- new_item:  Item to add to the list
function add_to_decoration_list_obj(obj, key, new_item)
  if obj == nil then
    print_error("obj is nil")
    return false
  end
  local guid = obj.getGUID()
  add_to_decoration_list_guid(guid, key, new_item)
end

-- Delete the reference to the GUID from the decorations table
function remove_decorations_for_guid(guid)
  if guid == nil then
    return
  end
  g_decorations[guid] = nil
end

-- Delete the reference to the object from the decorations table
function remove_decorations_for_obj(obj)
  if obj == nil then
    return
  end
  remove_decorations_for_guid(obj.getGUID())
end
