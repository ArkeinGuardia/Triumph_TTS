

function history_record_object_destroy(dying_object)
  local command_color = get_decoration_for_obj(dying_object, "command_color")
  local player_color = get_decoration_for_obj(base_obj, "player_color")

  local event = {
    guid = dying_object.getGUID(),
    name = dying_object.getName(),
    location = dying_object.getPosition(),
    y_rotation = dying_object.getRotation()['y'],
    decorations = g_decorations[ dying_object.getGUID() ]
  }
  local self = event

  event['undo'] = function()
      -- respawn the object
      local base_definition_name = self.decorations.base_definition_name
      local base_definition = get_base_definition_from_name(base_definition_name)
      if base_definition == nil then
        print_error("base definition is nil")
        return
      end
      local is_red_player = ("RED" == self.decorations.player_color)
      local base_obj = spawn_base(base_definition, self.location,
        self.y_rotation, is_red_player, self.command_color)
      base_obj.setName(self.name)

      -- change the decoration to use the new guid
      local new_guid = base_obj.getGUID()
      g_history_stack:rename_guid(self.guid, new_guid)
      g_decorations[new_guid] = event.decorations
      self.guid = new_guid
    end

  event['redo'] = function()
      g_ignore_next_delete[ self.name] = true
      local base = getObjectFromGUID(self.guid)
      if base == nil then
        print_error("base base for " .. tostring(self.guid))
        return
      end
      base.destruct()
    end

  push_to_history_stack(event)
end
