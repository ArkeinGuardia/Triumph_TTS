Stack = {}


-- This is NOT a true stack, but more like a list that behaves with a browsable
-- head. It imitates history stacks: you can go down but doesnt remember elements
-- until you go up. However, if you add something, everything up of the current
-- is removed.
function Stack:Create()
    -- Fake node that is before the first recorded position
    local tail = { after=nil, before=nil,
      apply = function()
        print_important("Before first event")
        return false
      end
    }

    -- Fake node that is after the last recorded position.
    -- Current should never point to head.
    local head = { after=nil, before=nil,
      apply = function()
        print_important("After last event")
        return false
      end
    }
    tail.before = tail
    tail.after = head
    head.after = head
    head.before = tail

    local _stack = {}

    -- Maximum number of events to keep
    _stack._capacity = 60

    -- dummy nodes indicating one past the last known events.
    _stack._head = head
    _stack._tail = tail


    -- Board as we know it.
    _stack._current = _stack._head.before

    -- number of events
    _stack._size = 0

    function _stack:size()
      return self._size
    end

    -- Is the current node at the last known event.
    function _stack:is_at_top()
      return (_stack._current == _stack._head.before)
    end


    -- Return the most recent event that is known in the history.
    -- nil if no events are known.
    function _stack:top()
      if _stack:size() == 0 then
        return nil
      end
      return _stack._head.before
    end

    -- Enters the value into the stack at the top.
    function _stack:push(event)
      if nil == event then
        print_error("pushing nil")
        return
      end
      local apply = event["apply"]
      if nil == apply then
        print_error("apply is nil")
        return
      end

      self:_pop_to_current()

      while _stack._size >= _stack._capacity do
        _stack:_delete_node(_stack._tail.after)
      end

      -- Make new node to be the top of stack.
      local new_node = {
        after = _stack._head,
        before = _stack._head.before,
                apply = function()
                  event.apply()
                end
      }
      _stack._head.before.after = new_node
      _stack._head.before = new_node
      _stack._current = new_node

      _stack._size = _stack._size + 1
    end


    -- Gets the current element and advances current lower into the stack, as if
    -- the element is removed (but it isn't). Cannot go lower than the bottom.
    function _stack:go_back()
        self._current = self._current.before
        self._current.apply()
    end

    -- Goes up in the stack, setting the current to the top of the current one,
    -- and returns it. The stack itself is not modified. Cannot go upper than
    -- the top.
    function _stack:go_forward()
        self._current = self._current.after
        self._current.apply()
    end


    function _stack:_delete_node(node)

      node.before.after = node.after
      node.after.before = node.before
      -- nil the pointers so the node can be garbage collected
      node.before = nil
      node.after = nil

      self._size = self._size - 1
    end

    -- Drops everything on top of the current.
    function _stack:_pop_to_current()
      local current = self._current
      while self._current ~= self._head.before do
        self:_delete_node(self._head.before)
      end
    end

    return _stack
end

g_history_stack = Stack:Create()


function push_to_history_stack(event)
    g_history_stack:push(event)
    log('Pushed new event')
    log(event)
end



-- Applies the last move on the history stack, going back
function go_back_history_stack()
    print_info("Going back in history")
    g_history_stack:go_back()
end

-- Undoes the last move on the history stack, going forward
function go_forward_history_stack()
  g_history_stack:go_forward()
  print_info("Going forward in history")
end
