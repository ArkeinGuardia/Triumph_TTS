require("Triumph_TTS/scripts/stack")

HistoryStack = {}


-- This is NOT a true stack, but more like a list that behaves with a browsable
-- head. It imitates history stacks: you can go down but doesnt remember elements
-- until you go up. However, if you add something, everything up of the current
-- is removed.
function HistoryStack:Create()

    local _stack = {}


    -- Maximum number of events to keep
    _stack._capacity = 60

    -- Nodes that can be undone
    _stack._history = Stack:Create()
    -- Nodes that have been undone
    _stack._undone = Stack:Create()

    function _stack:size()
      return self._history:size()
    end


    -- Return the most recent event that is known in the history.
    -- nil if no events are known.
    function _stack:top()
      if self._history:size() == 0 then
        return nil
      end
      return self._history:top()
    end

    -- Enters the value into the stack at the top.
    function _stack:push(event)      
      if nil == event then
        print_error(debug.traceback())
        error("pushing nil")
        return
      end
      if event.undo == nil then
        print_error(debug.traceback())
        error("Event is not undoable")
        return
      end
      if event.redo == nil then
        print_error(debug.traceback())
        error("Event is not redoable")
        return
      end
      if event.rename_guid == nil then
        print_error(debug.traceback())
        error("Event does not support rename_guid")
        return
      end
      self._undone:clear()
      if self._history:size() == 0 then
        event.id = 1
      else
        event.id = self._history:top().id + 1
      end

      self._history:push(event)

      if self._history:size() > _stack._capacity then
        self._history:pop_front()
      end

      print_info("Move #" .. tostring(event.id))
    end


    -- Gets the current element and advances current lower into the stack, as if
    -- the element is removed (but it isn't). Cannot go lower than the bottom.
    function _stack:go_back()
      if self._history:size() == 0 then 
        print_important("History stack is empty")
        return
      end
      event = self._history:pop()
      self._undone:push(event)
      if event.undo == nil then
        print_error("Event is not undoable")
        return
      end
      event:undo()
      print_info("Undone move #" .. tostring(event.id))
      if self._history:size() ~= 0 then
        print_info("Back at move #" .. tostring(self._history:top().id))
      end
    end

    -- Goes up in the stack, setting the current to the top of the current one,
    -- and returns it. The stack itself is not modified. Cannot go upper than
    -- the top.
    function _stack:go_forward()
      if self._undone:size() == 0 then
        print_error("undo stack is empty")
        return
      end
      event = self._undone:pop()
      if event.redo == nil then 
        print_error("event is not redoable")
        return
      end
      event:redo()
      self._history:push(event)
      print_info("Restored move #" .. tostring(event.id))
    end


    -- Is there an event to undo?
    function _stack:is_undoable()
      return self._history:size() ~= 0
    end

    -- Is there an event to redo?
    function _stack:is_redoable()
      return self._undone:size() ~= 0
    end


    -- Send to all the history events that an object's GUID has changed.
    function _stack:rename_guid(old_guid, new_guid)
      rename = function(event)
        event:rename_guid(old_guid, new_guid)
      end
      self._undone:apply(rename)
      self._history:apply(rename)
    end

    return _stack
end

-- Number of history events created
g_history_stack = HistoryStack:Create()


function push_to_history_stack(event)
    g_history_stack:push(event)
    update_history_ui()
end



-- Applies the last move on the history stack, going back
function go_back_history_stack()
    print_info("Going back in history")
    g_history_stack:go_back()
    update_history_ui()
end

-- Undoes the last move on the history stack, going forward
function go_forward_history_stack()
  g_history_stack:go_forward()
  print_info("Going forward in history")
  update_history_ui()
end

function update_history_ui()
  local enable_undo =  g_history_stack:is_undoable()
  local enable_redo =  g_history_stack:is_redoable()

  UI.setAttribute('button_undo_move', 'interactable', enable_undo)
  UI.setAttribute('button_redo_move', 'interactable', enable_redo)
end
