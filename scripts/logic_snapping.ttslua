-- Are two bases facing a a direction that allows for the snapping rule to take place?
-- stable_rotation_degrees: facing of the base not being moved in dregrees
-- moving_rotation_degrees: facing of the moving base in degrees
function are_facings_degrees_close_enough_to_snap(stable_rotation_degrees, moving_rotation_degrees)
  local angle_diff_degrees = stable_rotation_degrees - moving_rotation_degrees
  angle_diff_degrees = normalize_degrees(angle_diff_degrees)
  while angle_diff_degrees > 90 do
    angle_diff_degrees = angle_diff_degrees - 90
  end
  -- angle is now between 0 and 90
  angle_diff_degrees = angle_diff_degrees - 45
  -- angle is now between -45 and 45
  angle_diff_degrees = math.abs(angle_diff_degrees)
  -- angle is now beteeen 0 and 45.

  local delta = 45 - angle_diff_degrees
  if delta >= g_max_angle_snap_degrees then
      return false
  end
  return true
end

function is_facing_close_enough_for_snapping(stable_base_cached, moving_base_cached)
  local stable_rotation_degrees = stable_base_cached.getRotation()['y']
  local moving_rotation_degrees = moving_base_cached.getRotation()['y']
  return are_facings_degrees_close_enough_to_snap(stable_rotation_degrees, moving_rotation_degrees )
end


-- Are two bases close enough to snap?
-- moving_base: Base being moved, instance of base_cache
-- resting_base: Base that will be snapped against, instance of base_cache
-- distance_sq: Square of the distance that the moving_base will have
-- to be moved to snap.
-- return true if the bases are close enough to snap, false if the
-- distance is too large
function is_bases_close_enough_to_snap(moving_base, resting_base, distance_sq)
  -- small distances are always snapped
  if distance_sq <  g_max_corner_distance_snap_sq then
    return true
  end

  -- large distances are never snapped
  if distance_sq >= g_max_corner_distance_snap_intersect_sq then
    return false
  end

  if not moving_base.intersectsWith(resting_base) then
    return false
  end

  -- since the bases are on top of each other which is not legal in
  -- DBA use a larger threshold to determine if we can snap.
  if distance_sq < g_max_corner_distance_snap_intersect_sq then
    return true
  end

  return false
end


-- is the moved base close enough to be snapped to another base?
-- obj base being moved, instance of base_cache
-- base Other base to compare against, instance of base_cache
function is_snapable(obj, base)
  -- Check if the two bases are pretty close
  local pos = obj.getPosition()
  local pos_base = base.getPosition()
  local distance = distance_points_flat_sq(pos, pos_base)

  -- no snap if the distance is too small
  if distance < 0.0001 then
    return false
  end

  local max_distance
  if obj['is_large_base'] and base['is_large_base'] then
    max_distance = g_max_distance_alignment * 16
  elseif obj['is_large_base'] or base['is_large_base'] then
    max_distance = g_max_distance_alignment * 4
  else
    max_distance = g_max_distance_alignment
  end

  if not (distance < max_distance) then
    return false
  end

  return is_facing_close_enough_for_snapping(obj, base)
end

-- find the corners on each base that are closest to each other
function find_closest_corners(moving_base_cached, stable_base_cached)
  local result = {
      distance_sq=math.huge,
      stable_base=stable_base_cached}
  local moving_transform = moving_base_cached.getTransform()
  local stable_transform = stable_base_cached.getTransform()
  for _,moving_corner_name in pairs({"topleft", "topright", "botleft", "botright"}) do
    local moving_corner = moving_transform.corners[moving_corner_name]
    for _,stable_corner_name in pairs({"topleft", "topright", "botleft", "botright"}) do
      local stable_corner = stable_transform.corners[stable_corner_name]
      local distance_sq = distance_points_flat_sq(moving_corner, stable_corner)
      if distance_sq < result.distance_sq then
        result.distance_sq = distance_sq
        result['moving_corner'] = moving_corner_name
        result['stable_corner'] = stable_corner_name
      end
    end
  end
  return result
end


-- Find the best snapping rule for a base.
-- obj:  Object being moved, instance of base_cache,
-- base: Resting base that might be snapped against, instance of base_cache.
-- Return table containing the distance squared the object has to
-- be moved to snap, and the best snapping rule, and the base itself.
-- nil if there is no snapping rule that can be used.
function find_best_snap_rule_for_base(obj, base)
  -- Discard fast bases that are too far
  if not is_snapable(obj, base) then
    return nil
  end

  local rule = find_closest_corners(obj, base)
  return rule
end


-- find the snap rule that has the closest distance
function min_snap_distance(ruleA, ruleB)
  if ruleA == nil then
    return ruleB
  end
  if ruleB == nil then
    return ruleA
  end
  if ruleA['distance_sq'] <= ruleB['distance_sq'] then
    return ruleA
  end
  return ruleB
end

-- Find the best snapping rule for all bases.
-- obj:  base being moved, instance of base_cache
-- Return table containing the distance squared the object has to
-- be moved to snap, and the best snapping rule, and the base itself.
-- nil if there is no snapping rule that can be used.
function find_best_snap_rule_for_bases(obj)
  local best_rule = nil
  local bases = get_all_bases()
  for _, base in pairs(bases) do
    local base_cache = build_base_cache(base)
    local base_rule = find_best_snap_rule_for_base(obj, base_cache)
    best_rule = min_snap_distance(best_rule, base_rule)
  end
  if best_rule == nil then
    return nil
  end
  local close_enough = is_bases_close_enough_to_snap(obj, best_rule['stable_base'],best_rule['distance_sq'])
  if not close_enough then
    return nil
  end
  return best_rule
end


-- Return the angle to add to the moving base to have
-- it snap to the stable base.
function snap_angle_change(moving_base_rotation, stable_base_rotation)
  local angle_change = math.huge
  local result = nil
  for angle=0,270,90 do
    local new_moving = stable_base_rotation+angle
    local difference = angle_difference_degrees(new_moving, moving_base_rotation)
    if difference < angle_change then
      angle_change = difference
      result = new_moving
    end
  end
  return normalize_degrees(result)
end

-- Move the base so it is facing the same, opposite, or orthoganal to
-- the specified base, and that a corner on the moving base is
-- in contact with a corner on the resting base.
-- moving_base_cache: Base that is movnig.
-- snap_rule:  Base to snap to, and the corners that should meet.
function snap_corners(moving_base_cache, snap_rule)
  local original_position=deep_copy(moving_base_cache.getPosition())
  local original_rotation=deep_copy(moving_base_cache.getRotation())
  -- Snap the heading of the moving base.
  local moving_heading = moving_base_cache.getRotation().y
  local stable_heading = snap_rule.stable_base.getRotation().y
  local new_angle = snap_angle_change(moving_heading, stable_heading)
  local rot = moving_base_cache.getRotation()
  rot['y'] = new_angle
  moving_base_cache.setRotation(rot)

  local new_corners = moving_base_cache.getCorners()

  local moving_corner_name = snap_rule.moving_corner
  local moving_corner = new_corners[ moving_corner_name ]

  -- Calculate how much the corner has to move to touch
  local stable_corner_name = snap_rule.stable_corner
  local stable_corner = snap_rule.stable_base.getCorners()[ stable_corner_name ]
  local x_diff = stable_corner.x - moving_corner.x
  local y_diff = stable_corner.y - moving_corner.y
  local z_diff = stable_corner.z -moving_corner.z
  local new_pos = moving_base_cache.getPosition()
  new_pos.x = new_pos.x + x_diff
  new_pos.y = new_pos.y + y_diff
  new_pos.z = new_pos.z + z_diff
  moving_base_cache.setPosition(new_pos)

  -- Since after snapping the corners are identical the two base
  -- may be considered to overlap. So we do not check if
  -- snapping would result in bases overlapping.

  if g_movement_reporting_enabled == true then
    print_info("Snapped " .. moving_corner_name .. " to " .. stable_corner_name)
  end
end


-- If a base being moved is close enough to another base that it would
-- align with then snap to moving base to the aligned position.
-- obj:  base that is being moved.
function snap_picked_base(obj)
    local initial_corners = g_picked_base_initial_transform['corners']

    local pos = obj.getPosition()

    if str_has_substr(obj.getName(), 'Camp') then
        -- Always assume that camps are 40mm depth! This may not always be the
        -- case, in which case this code needs to be changed
        local size_table = g_depth_table_in

        local edge_camp_pos = (size_table / 2) - (g_base_width_in_inches / 2)
        local distance = math.abs(math.abs(pos['z']) - edge_camp_pos)

        print_debug('Camp has pos ' .. pos['z'] .. ' which has distance ' .. distance ..' to the edge ' .. edge_camp_pos)

        if  distance < g_max_camp_edge_snap then
            if pos['z'] > 0 then
                pos['z'] = edge_camp_pos
                obj.setRotation({x=0, y=180, z=0})
            else
                pos['z'] = -edge_camp_pos
                obj.setRotation({x=0, y=0, z=0})
            end
            pos['y'] = g_bases_position
            obj.setPosition(pos)
            print_info('Camp snapped to battle edge')
        else
            print_debug('Moving a camp, which should not snap to anything')
        end

        return calculate_transform(obj)
    end

    local obj_cache = build_base_cache(obj)
    local snap_rule = find_best_snap_rule_for_bases(obj_cache)
    if snap_rule ~= nil then
      snap_corners(obj_cache, snap_rule)
      return calculate_transform(obj)
    end

    -- If there's nothing else to snap, maybe I can snap to my initial
    -- position if I moved too little
    local new_transform = calculate_transform(obj)
    local new_corners = new_transform['corners']
    local distance = max_distance_between_bases(new_corners, initial_corners)
    if distance < g_max_inches_snap_reset then
        -- Snap back!
        obj.setPosition(g_picked_base_initial_transform['position'])
        obj.setRotation(transform_to_rotation_vector(g_picked_base_initial_transform))
    else
        -- No snapping, return the distance between positions
        pos['y'] = g_base_height_tabletop + g_table_thickness + g_base_height_inches
        obj.setPosition(pos)
    end
    return calculate_transform(obj)
end
