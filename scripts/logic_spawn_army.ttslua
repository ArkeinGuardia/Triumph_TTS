
g_base_index = 1
g_bases = {}

-- If the base is dismountable add a menu item to dismount
-- the base
function add_dismount_context_menu_base(base_obj, is_red_player, command_color)
  local definition = get_base_definition_from_base_obj(base_obj)
  if nil == definition then
    return
  end
  local dismount_as = definition['dismount_as']
  if nil == dismount_as then
    return
  end
  local dismounted_definition = get_base_definition(dismount_as)
  if nil == dismounted_definition then
    return
  end

  local decorations = g_decorations[base_obj.getGUID()]
  if nil == decorations then
    return
  end
  local is_red_player = decorations['is_red_player']
  local command_color = decorations['command_color']

  base_obj.addContextMenuItem('Dismount', function()
    local old_name = base_obj.getName()
    local pos = base_obj.getPosition()
    local rotation = base_obj.getRotation()
    local y_rotation = rotation.y
    base_obj.destruct()

    local new_obj = spawn_base(dismounted_definition, pos, y_rotation,
      is_red_player, command_color)
    local new_name = new_obj.getName()
    print_info("Dismounted " .. old_name .. " as " .. new_name)
  end)
end

function add_context_menu_base(base_obj)
    base_obj.clearContextMenu()
    base_obj.addContextMenuItem("Move forward single", function()
        local moved_mus = move_base(base_obj, from_mu_to_in(g_mu_movement))
        print_info(base_obj.getName() .. ' ' .. from_in_to_mu(moved_mus) .. ' MU forward')
    end)
    base_obj.addContextMenuItem("Move back single", function()
        local moved_mus = move_base(base_obj, -from_mu_to_in(g_mu_movement))
        print_info(base_obj.getName() .. ' ' .. from_in_to_mu(moved_mus) .. ' MU backwards')
    end)
    base_obj.addContextMenuItem("Push forward", function()
        push_forward(base_obj)
    end)
    base_obj.addContextMenuItem("Push back", function()
        push_back(base_obj)
    end)
    base_obj.addContextMenuItem("Turn around", function()
        turn_around_base(base_obj)
    end)
   base_obj.addContextMenuItem("Killed", function()
     local ok
     local error
       ok,error = pcall( function()
        base_killed(base_obj)
      end)
      if not ok then
        print_error("base_killed: " .. tostring(error))
      end
    end)
    base_obj.addContextMenuItem("Make General", function()
        make_general(base_obj)
    end)
    add_dismount_context_menu_base(base_obj)
    base_obj.addContextMenuItem('Toggle tool tips', function()
        toggle_tool_tips()
    end)
end

function add_context_menu_table(table_obj)
    table_obj.addContextMenuItem('Rotate 180ยบ', function()
        rotate_table()
    end)
    table_obj.addContextMenuItem('Fix terrain and lock', function()
        fix_terrain_and_lock()
    end)
    table_obj.addContextMenuItem('Toggle rulers', function()
        toggle_deployment_ruler()
    end)
    table_obj.addContextMenuItem('Toggle BUA fire/ZOC', function()
        show_gizmo_bua()
    end)
end

function toggle_deployment_ruler()
    g_deployment_lines_enabled = not g_deployment_lines_enabled
    if g_deployment_lines_enabled then
        draw_deployment_lines()
    else
        remove_deployment_lines()
    end
end

function on_clone(source_obj, new_obj)
    local name = source_obj.getName()
    print_info(name .. " has been duplicated.")
    local new_name = name .. " clone " .. new_obj.getGUID()
    new_obj.setName(new_name)
    g_bases[new_name] = {
        tile = g_bases[name]['tile'],
        is_red_player = g_bases[name]['is_red_player']
    }
    new_obj.clearContextMenu()
    g_decorations[new_obj.getGUID()] = deep_copy(g_decorations[source_obj.getGUID()])
    add_context_menu_base(new_obj)

end

function onObjectSpawn(new_obj)
    local name = new_obj.getName()
    local my_guid = new_obj.getGUID()
    if name ~= nil and str_starts_with(name, "base") then
        -- Check if the name as an old one
        local all_objs = getAllObjects()
        local bases = filter_bases(all_objs)
        local found_base = nil
        for _,base in ipairs(bases) do
            if base.getName() == name and base.getGUID() ~= my_guid then
                found_base = base
                break
            end
        end

        if found_base ~= nil then
            on_clone(found_base, new_obj)
        end
    end
end


-- Always return the same figure name
function static_model_iterator(model_name)
  return function ()
    return model_name
  end
end

-- Return the figures in sequence
function fixed_model_iterator(fixed_models)
  local i = 0
  return function ()
    i = i + 1
    return fixed_models[i]
  end
end

-- Return a random figure
function random_model_iterator(random_models)
  if random_models == nil then
    print_error("random_models is nil")
    return nil
  end
  local nb = tlen(random_models)
  return function ()
      local i = math.random(1, nb)
      return random_models[i]
  end
end


-- Appendix A
-- @param troop_type, e.g. archers
-- @return Number of figures that should be on the base,
function figures_per_base(troop_type)
  if troop_type == "Archers" then
    return 4
  end
  if troop_type == "Bow Levy" then
    return 3
  end
  if troop_type == "Light Foot" then
    return 3
  end
  if troop_type == "Light Spear" then
    return 3
  end
  if troop_type == "Rabble" then
    return 3
  end
  if troop_type == "Raiders" then
    return 4
  end
  if troop_type == "Skirmishers" then
    return 2
  end
  if troop_type == "Warband" then
    return 3
  end

  if troop_type == "Elite Foot" then
    return 4
  end
  if troop_type == "Heavy Foot" then
    return 4
  end
  if troop_type == "Horde" then
    return 7
  end
  if troop_type == "Pavisiers" then
    return 8
  end
  if troop_type == "Pikes" then
    return 4
  end
  if troop_type == "Spears" then
    return 4
  end
  if troop_type == "Warriors" then
    return 4
  end


  if troop_type == "Bad Horse" then
    return 3
  end
  if troop_type == "Elite Cavalary" then
    return 3
  end
  if troop_type == "Horse Bow" then
    return 2
  end
  if troop_type == "Javelin Cavalry" then
    return 2
  end
  if troop_type == "Knights" then
    return 3
  end

  if troop_type == "Cataphracts" then
    return 4
  end

  print_error("No default number of figures for " .. troop_type)
  return 0
end


-- add models to base object
-- base_name: Name of the base, e.g. "Camp"
-- model_definition: definition of how the base should look like
-- base_definition: definition of base we are constructing
-- base_obj: base object
-- is_player_red: red or blue base
-- pos Location of the base.
-- y_rotation: rotation of the base
function add_models(base_name, model_definition, base_definition, base_obj, is_red_player, pos, y_rotation)
  local n = model_definition['n_models']
  if n == nil then
    n = figures_per_base(base_definition.name)
  end
  if (n == 0) then
      base_obj.setRotation({0, y_rotation, 0})
      base_obj.auto_raise = false
      return
  end

  local depth = get_depth_base(model_definition['base'])
  local half_depth = depth / 2
  local half_width = g_base_width_in_inches / 2

  local rows = 1
  local columns = n
  if n > 4 then
      rows = math.floor(math.sqrt(n))
      columns = math.ceil(n/rows)
  end

  local column_width = g_base_width_in_inches / (columns + 1)
  local row_depth = depth / (rows + 1)

  local model_name = model_definition['model_data']

  local meshes = {}

  -- If the element has multiple nonfixed element, select randomly without
  -- repeating
  if model_name ~= nil then
    if nil ~= _G[model_name]['mesh'] then
      meshes = calculate_random_meshes(n, _G[model_name]['mesh'])
    end
  end

  local figure_iter -- iterator of next figure to add
  if model_name ~= nil then
    figure_iter = static_model_iterator(model_name)
  elseif model_definition['fixed_models'] ~= nil then
    figure_iter = fixed_model_iterator(model_definition['fixed_models'])
  elseif model_definition['random_models'] ~= nil then
    figure_iter = random_model_iterator(model_definition['random_models'])
  else
    print_error("model definition not understood")
    return nil
  end


  print ("305 ")

  for i=1,n do
      local column = (i - 1) % columns + 1
      local row = math.floor((i - 1) / columns) + 1

      local random_rotation = math.random(0, 40) - 20
      if str_has_substr(base_name, 'Camp') then
          random_rotation = 0
      end

      local random_x = 0
      local random_z = 0
      if base_definition['loose'] == true then
          random_x = random_float(-g_max_loose_spawn, g_max_loose_spawn)
          random_z = random_float(-g_max_loose_spawn, g_max_loose_spawn)
      end

      local relative_pos = {
          x = pos['x'] + column * column_width - half_width + random_x,
          y = pos['y'] + g_base_height_inches / 2,
          z = pos['z'] + row * row_depth - half_depth + random_x
      }

      local this_model_name = figure_iter()
      local soldier_obj = nil
      if this_model_name ~= nil then
        if _G[this_model_name]['customasset'] ~= nil then
            soldier_obj = spawn_asset(this_model_name, relative_pos, random_rotation)
        else
          -- The object has non-fixed models, so we use any of the
          -- randomly selected meshes
          soldier_obj = spawn_model(this_model_name, relative_pos, random_rotation, minimal_collider, is_red_player, nil, meshes[i])
        end
      else
          -- Now we have fixed models, so we use the corresponding one
          -- Except that fixed models may use assets instead of meshes!
          this_model_name = model_definition['fixed_models'][i]

          if _G[this_model_name]['customasset'] ~= nil then
              soldier_obj = spawn_asset(this_model_name, relative_pos, random_rotation)
          else
              meshes[i] = random_element(_G[this_model_name]['mesh'])
              soldier_obj = spawn_model(this_model_name, relative_pos, random_rotation, minimal_collider, is_red_player, nil, meshes[i])
          end
      end

      base_obj.addAttachment(soldier_obj)
  end
  print ("357 ")

  base_obj.setRotation({0, y_rotation, 0})
  base_obj.auto_raise = false
end

-- base: base_definition base_definition
-- pos: position where the base will be located
-- y_rotation: in degrees
-- is_red_player: Will the base belong to the red player
-- common_color: color of the base edge, who ows the base.
function spawn_base(base_definition, pos, y_rotation, is_red_player, command_color)
    print_debug('Spawning base #' .. g_base_index)
    local overriden_tex = nil
    if base_definition['ignore_terrain'] == nil then
        local type = from_toggle_number_to_table_type(g_current_table_type)
        if tables[type] == nil then
            type = 'grass'
        end

        if is_red_player then
            overriden_tex = tables[type]['red_player_base_tex']
        else
            overriden_tex = tables[type]['blue_player_base_tex']
        end
    end

    local model_definition = get_a_model_definition(base_definition)
    local model_base_name = model_definition['base']
    if model_base_name == nil then
      print_error("no base for model definition")
      return
    end
    local model_base = _G[model_base_name]
    if model_base == nil then
      print_error("No variable defined for " .. tostring(model_base_name))
    end
    -- model texture overides other textures
    local texture_name
    if is_red_player then
      texture_name = 'player_red_tex'
    else
      texture_name = 'player_blue_tex'
    end

    local model_texture = model_base[texture_name]
    if (nil ~= model_texture) then
      overriden_tex = model_texture
    end

    local base_obj = spawn_model(model_base_name, pos, 0, nil, is_red_player, overriden_tex)

    if base_definition['name'] == nil then
        print_error('One of the base definitions of this army has no name! Please report to us so we can fix it asap')
        return
    end
    local base_name = 'base ' .. base_definition['name'] .. ' #' .. g_base_index
    base_obj.setName(base_name)

    g_base_index = g_base_index + 1
    g_bases[base_name] = {
        tile = model_definition['base'],
        is_red_player = is_red_player
    }

    if command_color ~= 'None' then
        if command_color == 'Orange' then
            base_obj.highlightOn({r=1,g=0.5,b=0}, 86400)
        elseif command_color == 'Yellow' then
            base_obj.highlightOn({r=1,g=1,b=0}, 86400)
        elseif command_color == 'Green' then
            base_obj.highlightOn({r=0.1,g=1,b=0.4}, 86400)
        elseif command_color == 'Purple' then
            base_obj.highlightOn({r=0.3,g=0,b=0.7}, 86400)
        end
    end

    local base_definition_name = base_definition['id']
    if base_definition_name == nil then
        -- LEGACY
        base_definition_name = base_definition['base_definition_name']
    end

    g_decorations[base_obj.getGUID()] = {
      base_definition_name = base_definition_name,
      command_color = command_color,
      is_red_player = is_red_player
    }

    add_models(base_name, model_definition, base_definition, base_obj,
        is_red_player, pos, y_rotation)
    update_tool_tip(base_obj)
    add_context_menu_base(base_obj)

-- How to use object level load and save
--    base_obj.setTable("decorations", {id="1234"})
--base_obj.setLuaScript([[
--function onLoad(save_state)
--  if save_state ~= nil then
--    print("Calling onLoad for object "..self.getGUID())
--    print("save_state=", save_state)
--  end
--end
--function onSave()
--  print("Calling onSave for object "..self.getGUID())
--  return JSON.encode(self.getTable("decorations"))
--end
--]])

    return base_obj
end

troop_type_to_plain_model_tile_name = {}
troop_type_to_plain_model_tile_name['Archers']='tile_plain_40x20_Archers'
troop_type_to_plain_model_tile_name['Bow Levy']='tile_plain_40x30_Bow_Levy'
troop_type_to_plain_model_tile_name['Light Foot']='tile_plain_40x20_Light_Foot'
troop_type_to_plain_model_tile_name['Light Spear']='tile_plain_40x20_Light_Spear'
troop_type_to_plain_model_tile_name['Rabble']='tile_plain_40x30_Rabble'
troop_type_to_plain_model_tile_name['Raiders']='tile_plain_40x20_Raiders'
troop_type_to_plain_model_tile_name['Skirmishers']='tile_plain_40x20_Skirmishers'
troop_type_to_plain_model_tile_name['Warband']='tile_plain_40x20_Warband'
troop_type_to_plain_model_tile_name['Artillery']='tile_plain_40x40_Artillery'
troop_type_to_plain_model_tile_name['Elite Foot']='tile_plain_40x15_Elite_Foot'
troop_type_to_plain_model_tile_name['Heavy Foot']='tile_plain_40x15_Heavy_Foot'
troop_type_to_plain_model_tile_name['Horde']='tile_plain_40x40_Horde'
troop_type_to_plain_model_tile_name['Pavisiers']='tile_plain_40x40_Pavisiers'
   -- Appendix A uses "Pike"
troop_type_to_plain_model_tile_name['Pikes']='tile_plain_40x15_Pikes_Gen'
  -- Appendix A uses "Spear"
troop_type_to_plain_model_tile_name['Spears']='tile_plain_40x15_Spears'
troop_type_to_plain_model_tile_name['War Wagons']='tile_plain_40x40_War_Wagon'
troop_type_to_plain_model_tile_name['Warriors']='tile_plain_40x15_Warriors'
troop_type_to_plain_model_tile_name['Bad Horse']='tile_plain_40x30_Bad_Horse'
troop_type_to_plain_model_tile_name['Battle Taxi']='tile_plain_40x40_Battle_Taxi'
troop_type_to_plain_model_tile_name['Chariots']='tile_plain_40x40_Chariots'
troop_type_to_plain_model_tile_name['Elite Cavalary']='tile_plain_40x30_Elite_Cav'
troop_type_to_plain_model_tile_name['Horse Bow']='tile_plain_40x30_Horse_Bow'
troop_type_to_plain_model_tile_name['Javelin Cavalry']='tile_plain_40x30_Jav_Cav'
troop_type_to_plain_model_tile_name['Knights']='tile_plain_40x30_Knights'
troop_type_to_plain_model_tile_name['Cataphracts']='tile_plain_40x40_Cataphracts'
troop_type_to_plain_model_tile_name['Elephants']='tile_plain_40x40_Elephants'
troop_type_to_plain_model_tile_name['Camp']='tile_plain_40x40_Camp'

troop_type_to_plain_model_tile_name['Archers General']='tile_plain_40x20_Archers_General'
troop_type_to_plain_model_tile_name['Bow Levy General']='tile_plain_40x30_Bow_Levy_Gen'
troop_type_to_plain_model_tile_name['Light Foot General']='tile_plain_40x20_Light_Foot_Gen'
troop_type_to_plain_model_tile_name['Light Spear General']='tile_plain_40x20_Light_Spear_Gen'
troop_type_to_plain_model_tile_name['Rabble General']='tile_plain_40x30_Rabble_Gen'
troop_type_to_plain_model_tile_name['Raiders General']='tile_plain_40x20_Raiders_Gen'
troop_type_to_plain_model_tile_name['Skirmishers General']='tile_plain_40x20_Skirmishers_Gen'
troop_type_to_plain_model_tile_name['Warband General']='tile_plain_40x20_Warband_Gen'
troop_type_to_plain_model_tile_name['Artillery General']='tile_plain_40x40_Artillery_Gen'
troop_type_to_plain_model_tile_name['Elite Foot General']='tile_plain_40x15_Elite_Foot_Gen'
troop_type_to_plain_model_tile_name['Heavy Foot General']='tile_plain_40x15_Heavy_Foot_Gen'
troop_type_to_plain_model_tile_name['Horde General']='tile_plain_40x40_Horde_Gen'
troop_type_to_plain_model_tile_name['Pavisiers General']='tile_plain_40x40_Pavisiers_Gen'
   -- Appendix A uses "Pike"
troop_type_to_plain_model_tile_name['Pikes General']='tile_plain_40x15_Pikes_Gen'
  -- Appendix A uses "Spear"
troop_type_to_plain_model_tile_name['Spears General']='tile_plain_40x15_Spears_Gen'
troop_type_to_plain_model_tile_name['War Wagons General']='tile_plain_40x40_War_Wagon_Gen'
troop_type_to_plain_model_tile_name['Warriors General']='tile_plain_40x15_Warriors_Gen'
troop_type_to_plain_model_tile_name['Bad Horse General']='tile_plain_40x30_Bad_Horse_Gen'
troop_type_to_plain_model_tile_name['Battle Taxi General']='tile_plain_40x40_Battle_Taxi_Gen'
troop_type_to_plain_model_tile_name['Chariots General']='tile_plain_40x40_Chariots_Gen'
troop_type_to_plain_model_tile_name['Elite Cavalary General']='tile_plain_40x30_Elite_Cav_Gen'
troop_type_to_plain_model_tile_name['Horse Bow General']='tile_plain_40x30_Horse_Bow_Gen'
troop_type_to_plain_model_tile_name['Javelin Cavalry General']='tile_plain_40x30_Jav_Cav_Gen'
troop_type_to_plain_model_tile_name['Knights General']='tile_plain_40x30_Knights_Gen'
troop_type_to_plain_model_tile_name['Cataphracts General']='tile_plain_40x40_Cataphracts_Gen'
troop_type_to_plain_model_tile_name['Elephants General']='tile_plain_40x40_Elephants_Gen'
troop_type_to_plain_model_tile_name['Camp General']='tile_plain_40x40_Camp_Gen'

-- Return name (a string) of the variable that is plain tile for
-- the base definition
function get_plain_model_tile_name(base_definition)
  local name = base_definition.name
  local tile = troop_type_to_plain_model_tile_name[name]
  if tile == nil then
    print_error("No plain tile for " .. tostring(name))
    -- TODO choose something that is an obvious error -- like a plain tile with no info.
    return  'tile_grass_40x15'
    end
    return tile
end


-- Get a model definition, base and fgitures, that can be used to represent
-- a base definition.
function get_a_model_definition(base_definition)
  if not g_use_plain_bases then
    -- try to use models
    local id = base_definition.id
    if nil ~= id then
      if g_models[ id ] ~= nil then
        -- choose a random model definition
        local models = g_models[ id ]
        local index = math.random(1, #models)
        local model = models[index]
        assert(nil ~= model)
        return model
       end
    end

    if  base_definition.n_models ~= nil then
      -- base definition is model definition, legacy.
      return base_definition
    end
  end

  -- Use a plain base.
  local tile_name = get_plain_model_tile_name(base_definition)
  local base_def_name = base_definition.name
  return {
      name = base_def_name,
      ignore_terrain = 'false',
      n_models = 0,
      base = tile_name,
  }
end

-- Get the base definition for an base object.
-- base_obj:  Base object
-- return: base definition or nil.
function get_base_definition_from_base_obj(base_obj)
  local decoration = g_decorations[ base_obj.getGUID()]
  if nil == decoration then
    return nil
  end

  local base_definition_name = decoration.base_definition_name
  if nil == base_definition_name then
    return nil
  end
  local base_definition = g_base_definitions[base_definition_name]
  if nil ~= base_definition_name then
      return base_definition
  end

  base_definition = _G[base_definition_name]
  if nil ~= base_definition_name then
      return base_definition
    end

  print_error("base definition missing: " .. tostring(base_definition_name))
  table_print(base_obj)
  return nil
end


-- Get the definition for a base
-- base_data:  If string is the name of the variable holding the definition,
--    otherwise it is the definition.
-- return: table defining the base
function get_base_definition(base_data)
  if type(base_data) ~= "string" then
    return base_data
  end
  -- The string refers to the name of the variable that
  -- defines the base.
  local definition = _G[base_data]
  if nil == definition then
    print_error("base definition missing: " .. tostring(base_data))
  end
  definition.base_definition_name = base_data
  return definition
end

function get_note_text(army)
    local invasion=""
    if army['data']['Invasion'] ~= nil then
        invasion = army['data']['Invasion']
    end

    local maneuver=""
    if army['data']['maneuver'] ~= nil then
        invasion = army['data']['maneuver']
    end

    local terrain=""
    if army['data']['terrain'] ~= nil then
        terrain = army['data']['terrain']
    end

    local list=""
    if army['data']['list'] ~= nil then
        list = army['data']['list']
    end

    local general=""
    if army['data']['general'] ~= nil then
        list = army['data']['general']
    end

    local maker = ''
    if army['data']['manufacturer'] ~= nil then
        maker = '\n\nMiniatures by: ' .. army['data']['manufacturer']
    end

    local text =
        'Invasion: ' .. tostring(invasion) .. '. Maneuver: ' .. tostring(maneuver) .. '\n'
        .. 'Terrain: ' .. tostring(terrain) .. '\n'
        .. tostring(list) .. '\n'
        .. tostring(general) .. '\n'
        .. maker
    return text
end


-- Given an army object data, spawns it on the center of the table.
-- Hope nothing is in there and that all data is correct because this doesn't
-- validate
function spawn_army(army_name, army, is_red_player, command_color)
    math.randomseed(os.time())
    local n_bases = tlen(army) - 1
    local rows = 1
    if n_bases > g_max_bases_row then
        n_bases = g_max_bases_row
        rows = math.ceil(n_bases / g_max_bases_row)
    end

    local width_army = n_bases * g_base_width_in_inches

    local z_pos_0 = g_spawn_from_center_in
    local y_rotation = 180
    if is_red_player then
        z_pos_0 = g_spawn_from_center_in * -1
        y_rotation = 0
    end

    local z_pos = 5
    if is_red_player then
        z_pos = z_pos * -1
    end
    local i = 0
    for base_id,base_data  in pairs(army) do
        if base_id ~= 'data' then
            local base_definition = get_base_definition(base_data)
            if nil ~= base_definition then
              if base_definition['max'] == nil then
                base_definition['max'] = 1
              end

              for copy=1,base_definition['max'] do
                local z_pos_modifier = -1 * get_depth_base(get_plain_model_tile_name(base_definition)) / 2
                if is_red_player then
                    z_pos_modifier = -1 * z_pos_modifier
                end

                local column = i % g_max_bases_row
                local row = math.floor(i / g_max_bases_row)

                local row_z_pos = z_pos * (1 + row) + z_pos_0

                local location = {
                    x = g_offset_deployment_x + column * g_base_width_in_inches - width_army / 2,
                    y = g_base_height_tabletop + g_table_thickness + g_base_height_inches / 2,
                    z = row_z_pos - z_pos_modifier
                }
                local base_obj = spawn_base(base_definition, location, y_rotation, is_red_player, command_color)
                i = i + 1
              end
            end
        end
    end

    local note_row = math.floor(i / g_max_bases_row) + 1
    local note_pos = {
        x = g_offset_deployment_x,
        y = g_base_height_tabletop + g_table_thickness + 1,
        z = z_pos * (1 + note_row) + z_pos_0
    }

    local angle = 180
    if is_red_player then
        angle = 0
    end

    local note_text = get_note_text(army)

    spawn_note(army_name, note_text,
        note_pos,
        angle)

    update_tool_tips()
    print_important('Army deployed: ' .. army_name .. ', see chat for options')
    print_info(
      'List: ' .. tostring(army['data']['list']) .. "\n" ..
      'Agressiveness: ' .. tostring(army['data']['Invasion']) .. "\n" ..
      'Terrain: ' .. tostring(army['data']['terrain']))
end

function get_author_tile(tilename)
    local tile = _G[tilename]
    return tile['author']
end

function get_author_model(modelname)
    local model = _G[modelname]
    return model['author']
end

function get_author_base(base_definition)
  -- TODO broken for now due to meshwesh integration.
  -- Should return a set of authors that have made a model that
  -- could be used
  return "TODO"
    --if base['n_models'] == 0 then
    --     return get_author_tile(base['base'])
    -- end
    -- local model = base['model_data']
    -- if model == nil then
    --     model = base['fixed_models'][1]
    -- end
    -- return get_author_model(model)
end

function book_has_an_army_with_models(book_dataname)
    local book_armies = armies[book_dataname]
    for army_name,army in pairs(book_armies) do
        if is_army_with_models(army) then
            return true
        end
    end
    return false
end

function get_first_book_with_models()
    for book_name, book_armies in pairs(armies) do
        if book_has_an_army_with_models(book_name) then
            return book_name
        end
    end
    return nil
end

function get_first_army_with_models(book_dataname)
    local book_armies = armies[book_dataname]
    for army_name,army in pairs(book_armies) do
        if is_army_with_models(army) then
            return army_name
        end
    end
    return nil
end

function update_book_menu(book_selected)
    local options = {}
    for book_name, book_armies in pairs(armies) do
        if not g_filter_armies_models then
            table.insert(options, dataname_to_friendlyname(book_name))
        end

        if g_filter_armies_models
            and book_has_an_army_with_models(book_name) then
            table.insert(options, dataname_to_friendlyname(book_name))
        end
    end
    set_options_dropdown_by_id('dropdown_book', options, book_selected)
end

function update_player_color_menu(is_player_red)
    local selected = 2
    if is_player_red then
        selected = 1
    end
    set_options_dropdown_by_id('dropdown_playercolor', { 'Red', 'Blue' },  selected)
end


function pairsByKeys (t, f)
    local a = {}
    for n in pairs(t) do table.insert(a, n)
    end
    table.sort(a, f)
    local i = 0      -- iterator variable
    local iter = function ()   -- iterator function
        i = i + 1
        if a[i] == nil then
            return nil
        else
          return a[i], t[a[i]]
        end
    end
    return iter
end

function is_army_model_filtered_in(army)
  if not g_filter_armies_models then
    return true
  end
   return is_army_with_models(army)
end

function update_armies_menu(book, army_selected)
    -- Sort by army name alphabetically
    local options = {}
    for army_name, army in pairsByKeys(book) do
        if is_army_model_filtered_in(army) then
            table.insert(options, army_name)
        end
    end

    set_options_dropdown_by_id('dropdown_army', options, army_selected)
    g_army_selected = options[army_selected]
end

g_current_table = nil
function spawn_table_obj(model_url, texture_array_urls, is_large)
    local tablescale = { x = 1, y = 1, z = 1}
    if is_large then
        tablescale = { x = 1.333, y = 1, z = 1.333}
    end
    local obj = spawnObject({
        type = 'Custom_Model',
        position = { x = 0, y = g_base_height_tabletop, z = 0},
        rotation = { x = 0, y = 0, z = 0},
        scale = tablescale,
        sound = false,
        snap_to_grid = false,
        callback_function = function(obj)
            g_current_table = obj.getGUID()
            print_info('Table is set to ' .. g_current_table)
        end
    })
    local tex_index = math.random(1, #texture_array_urls)
    obj.setCustomObject({
        mesh = model_url,
        diffuse = texture_array_urls[tex_index],
        material = 1,
        cast_shadows = false,
        specular_sharpness = 0,
        specular_intensity = 0,
        freshnel_strength = 0
    })
    if is_large then
        print_important('Large table spawned, you can now put terrain on top, then use Right Click > Fix terrain.')
    else
        print_important('Table spawned, you can now put terrain on top, then use Right Click > Fix terrain.')
    end

    add_context_menu_table(obj)
    obj.setLock(true)
end

function change_bases_to_terrain(terrain_type)
    print_debug('Changing bases to ' .. terrain_type)
    local all_objs = getAllObjects()
    local bases = filter_bases(all_objs)
    for _,base in ipairs(bases) do
        local name = base.getName()
        if g_bases[name] ~= nil
            and not str_has_substr(g_bases[name]['tile'], 'plain') then

            print_debug('Changing ' .. name)
            local is_red = g_bases[name]['is_red_player']
            local tex = tables[terrain_type]['blue_player_base_tex']
            if is_red then
                tex = tables[terrain_type]['red_player_base_tex']
            end
            local custom = base.getCustomObject()
            custom['diffuse'] = tex
            base.setCustomObject(custom)
            g_ignore_next_delete[name] = true
            base.reload()
        end
    end
    Wait.frames(function()
        local all_objs = getAllObjects()
        local bases = filter_bases(all_objs)
        for _,base in ipairs(bases) do
            local name = base.getName()
            if g_bases[name] ~= nil then
                add_context_menu_base(base)
            end
        end
    end, 1)
end

function rotate_table()
    local gametable = getObjectFromGUID(g_current_table)
    local newrotation = gametable.getRotation()
    newrotation['y'] = newrotation['y'] + 180
    gametable.setRotation(newrotation)
end

function spawn_model(troop_name, pos, added_y_axis_rotation, collider, is_player_red, overridden_tex, overridden_mesh)
    -- Better pray that the input name actually exists! lol
    local model_data = _G[troop_name]
    if model_data == nil then
      print_error("Unable to spawn model, variable not defined: " .. tostring(troop_name))
    end

    local texture = overridden_tex
    if texture == nil then
        texture = model_data['player_blue_tex']
        if is_player_red then
            texture = model_data['player_red_tex']
        end

        -- Vegetation etc does not have that kind of player texture
        -- they are global
        if texture == nil then
            texture = model_data['texture']
        end
    end

    local selected_mesh = overridden_mesh
    if selected_mesh == nil then
        local meshes = model_data['mesh']
        local mesh_index = math.random(1, #model_data['mesh'])
        selected_mesh = meshes[mesh_index]
    end

    local spawn_data = get_spawn_model(pos,
        model_data['rotation'],
        model_data['height_correction'],
        model_data['scale'],
        selected_mesh,
        texture,
        collider)
    spawn_data['spawn']['rotation']['y'] = spawn_data['spawn']['rotation']['y'] + added_y_axis_rotation
    local obj = spawnObject(spawn_data['spawn'])
    obj.setCustomObject(spawn_data['custom_obj_attrs'])

    return obj
end

function spawn_asset(asset_name, pos, added_y_axis_rotation)
    print_debug('Spawning asset ' .. asset_name)
    if _G[asset_name]['rotation'] then
        added_y_axis_rotation = added_y_axis_rotation + _G[asset_name]['rotation']
    end

    local obj = spawnObject({
        type = 'Custom_Assetbundle',
        position = pos,
        rotation = { x = 0, y = added_y_axis_rotation, z = 0},
        scale = { x = 1, y = 1, z = 1 },
        sound = false,
        snap_to_grid = false
    })
    obj.setCustomObject({
        assetbundle = _G[asset_name]['customasset']
    })
    return obj
end

function calculate_random_meshes(how_many, meshes_available)
    local aux = {}
    local meshes = {}
    for i = 1, how_many do
        if #aux == 0 then
            for k,v in pairs(meshes_available) do
                aux[k] = v
            end
        end
        local index = math.random(1, #aux)
        meshes[i] = aux[index]
        table.remove(aux, index)
    end
    return meshes
end

function get_spawn_model(pos, rotation_correction, height_correction, model_scale, model_mesh, model_diffuse, collider_if_exists)
    return {
        spawn = {
            type = 'Custom_Model',
            position = { x = pos['x'], y = pos['y'] + height_correction, z = pos['z']},
            rotation = { x = 0, y = rotation_correction, z = 0},
            scale = { x = model_scale, y = model_scale, z = model_scale},
            sound = false,
            snap_to_grid = false
        },
        custom_obj_attrs = {
            mesh = model_mesh,
            diffuse = model_diffuse,
            material = 3,
            collider = collider_if_exists
        }
    }
end

g_ignore_next_delete = {}

function onObjectDestroy(dying_object)
    remove_decorations_for_obj(dying_object)
    local name = dying_object.getName()
    if g_ignore_next_delete[name] ~= nil then
        g_ignore_next_delete[name] = nil
        return
    end
    if is_table(dying_object) then
        print_info('Table removed from play')
        remove_deployment_lines()
        g_current_table = nil
    elseif g_bases[name] ~= nil then
        print_info('Base ' .. name .. ' removed from play')
        g_bases[name] = nil
    end
end


function delete_all_proxy()
    local all_objs = getAllObjects()
    for _,obj in ipairs(all_objs) do
        local name = obj.getName()
        if str_starts_with(name, 'base Proxy') then
            -- This executes on next frame
            obj.destroy()
        end
    end
end

function spawn_proxy_after_deletion()
    spawn_base({
        name = 'Proxy 40x15',
        base = 'tile_grass_40x15',
        ignore_terrain = 'false',
        n_models = 0
    }, {x=-42, y=2, z=-20}, 0, true)
    spawn_base({
        name = 'Proxy 40x20',
        base = 'tile_grass_40x20',
        ignore_terrain = 'false',
        n_models = 0
    }, {x=-42, y=2, z=-21}, 0, true)
    spawn_base({
        name = 'Proxy 40x30',
        base = 'tile_grass_40x30',
        ignore_terrain = 'false',
        n_models = 0
    }, {x=-42, y=2, z=-22.5}, 0, true)
    spawn_base({
        name = 'Proxy 40x40',
        base = 'tile_grass_40x40',
        ignore_terrain = 'false',
        n_models = 0
    }, {x=-42, y=2, z=-24}, 0, true)


    spawn_base({
        name = 'Proxy 40x15',
        base = 'tile_grass_40x15',
        ignore_terrain = 'false',
        n_models = 0
    }, {x=-42, y=2, z=20}, 180, false)
    spawn_base({
        name = 'Proxy 40x20',
        base = 'tile_grass_40x20',
        ignore_terrain = 'false',
        n_models = 0
    }, {x=-42, y=2, z=21}, 180, false)
    spawn_base({
        name = 'Proxy 40x30',
        base = 'tile_grass_40x30',
        ignore_terrain = 'false',
        n_models = 0
    }, {x=-42, y=2, z=22.5}, 180, false)
    spawn_base({
        name = 'Proxy 40x40',
        base = 'tile_grass_40x40',
        ignore_terrain = 'false',
        n_models = 0
    }, {x=-42, y=2, z=24}, 180, false)
end

function spawn_proxy_bases()
    delete_all_proxy()
    Wait.frames(function()
        spawn_proxy_after_deletion()
    end, 1)
end

function spawn_note(title, desc, pos, y_angle)
    local obj = spawnObject({
        type = "Notecard",
        position          = pos,
        rotation          = {x=0, y=y_angle, z=0},
        scale             = {x=1, y=1, z=1},
        sound             = false,
        snap_to_grid      = false,
    })
    obj.setName(title)
    obj.setDescription(desc)
end
