
function snap_coast(coast)
    if g_current_table == nil then
        print_debug('No table spawned yet, no need to do anything')
        return
    end
    local gametable = getObjectFromGUID(g_current_table)
    if gametable == nil then
        print_error('There is no current table, stored GUID is: ' .. g_current_table)
        return
    end

    local table_size = gametable.getBoundsNormalized()['size']
    local table_w = table_size['x']
    local table_h = table_size['z']

    -- 0 rotation for our coast objects is looking at -z
    local rotation = normalize_angle(math.rad(coast.getRotation()['y']))
    local pos = coast.getPosition()
    local bounds = coast.getBoundsNormalized()

    local h = bounds['size']['z']
    local zpos = table_h / 2 - (h / 2 - bounds['offset']['z'])
    local xpos = table_w / 2 - (h / 2 - bounds['offset']['z'])
    if g_game_settings['is_grand_triumph'] then
        xpos = xpos + table_w / 2
    end

    if (equals_float(rotation, 0, 0.17) or equals_float(rotation, 2*math.pi, 0.17))
        and equals_float(pos['x'], 0, g_max_camp_edge_snap)
        and equals_float(pos['z'], zpos, g_max_camp_edge_snap)
        then

        coast.setPosition({x=0, y=g_terrain_pos, z=zpos})
        coast.setRotation({x=0, y=0, z=0})
        print_info('coast Snapping top')

    elseif equals_float(rotation, math.pi/2, 0.17)
        and equals_float(pos['x'], -xpos, g_max_camp_edge_snap)
        and equals_float(pos['z'], 0, g_max_camp_edge_snap)
        then

        coast.setPosition({x=-xpos, y=g_terrain_pos, z=0})
        coast.setRotation({x=0, y=270, z=0})
        print_info('coast Snapping left')

    elseif equals_float(rotation, math.pi, 0.17)
        and equals_float(pos['x'], 0, g_max_camp_edge_snap)
        and equals_float(pos['z'], -zpos, g_max_camp_edge_snap)
        then

        coast.setPosition({x=0, y=g_terrain_pos, z=-zpos})
        coast.setRotation({x=0, y=180, z=0})
        print_info('coast Snapping bot')

    elseif equals_float(rotation, math.pi*3/2, 0.17)
        and equals_float(pos['x'], xpos, g_max_camp_edge_snap)
        and equals_float(pos['z'], 0, g_max_camp_edge_snap)
        then

        coast.setPosition({x=xpos, y=g_terrain_pos, z=0})
        coast.setRotation({x=0, y=90, z=0})
        print_info('coast Snapping right')

    else
        print_info('coast is not snapping')
    end
end

function snap_road(road)
    -- 0 rotation for our coast objects is looking at -z
    local rotation = normalize_angle(math.rad(road.getRotation()['y']))
    local pos = road.getPosition()

    if (equals_float(rotation, 0, 0.17)
        or equals_float(rotation, math.pi, 0.17)
        or equals_float(rotation, 2*math.pi, 0.17))
        and equals_float(pos['z'], 0, g_max_camp_edge_snap)
        then

        road.setPosition({x=pos['x'], y=g_terrain_pos, z=0})
        road.setRotation({x=0, y=0, z=0})
        print_info('Road Snapping Vertical')

    elseif (equals_float(rotation, math.pi/2, 0.17)
            or equals_float(rotation, 3*math.pi/2, 0.17))
            and equals_float(pos['x'], 0, g_max_camp_edge_snap)
        then

        road.setPosition({x=0, y=g_terrain_pos, z=pos['z']})
        road.setRotation({x=0, y=90, z=0})
        print_info('Road Snapping Horizontal')

    else
        print_info('Road is not snapping')
    end
end


-- Listeners to notify when the game table has been locked.
g_game_table_callbacks = {}

function fix_terrain_and_lock()
    local all_objs = getAllObjects()
    local terrains = {}
    for _,obj in ipairs(all_objs) do
        local name = obj.getName()
        if str_starts_with(name, 'terrain') then
            table.insert(terrains, obj)
        end
    end

    local gametable = getObjectFromGUID(g_current_table)
    local size = gametable.getBoundsNormalized()['size']
    local max_distance_from_table_sq = (size['x']/2)^2 + (size['z'] / 2)^2
    local pos_table = gametable.getPosition()
    local terrain_type = from_toggle_number_to_table_type(g_game_settings["table type"])

    if g_game_settings['3d_terrain'] == true then
      print_debug("3D terrain " .. tostring(g_game_settings['3d_terrain']))
    else
      -- shrink the terrain height
      print_debug("Shrinking 3d terrain height")
      for _,terrain in ipairs(terrains) do
        local terrain_size = terrain.getBoundsNormalized()['size']
        if terrain_size.y > 0.004 then
          local scale = terrain.getScale()
          scale.y = scale.y * (0.004 / terrain_size.y)
          terrain.setScale(scale)
          print_debug("shrinking " .. terrain.getName() .. " " .. tostring(scale.y))
          local pos = terrain.getPosition()
          pos.y = 1.18
          terrain.setPosition(pos)
        end
      end
    end

    for _,terrain in ipairs(terrains) do
      terrain.setLock(true)
    end

    for _,terrain in ipairs(terrains) do
        local terrain_pos = terrain.getPosition()
        local distance = distance_points_flat_sq(pos_table, terrain_pos)
        if distance <= max_distance_from_table_sq
            and pos_table['y'] < terrain_pos['y'] then

            print_debug('Found terrain with name ' .. terrain.getName())
            print_debug("terrain_decorations " .. tostring(g_game_settings['terrain_decorations']))
            if g_game_settings['terrain_decorations'] == true then
                process_vegetation(terrain, terrain_type)
            end
        end
    end
    Wait.frames(function()
        g_current_table = gametable.getGUID()
        gametable.setLock(true)
        g_game_settings['table locked'] = true
        -- Notify listener that gametable has been locked
        for callback_name,fun in pairs(g_game_table_callbacks) do
          fun()
        end
        print_important('Table is now locked')
    end, 1)
end

-- change the texture for a terrain object
-- terrain_obj: Object to modify
-- new_tex_url:  URL of the texture to apply.
function change_texture_terrain(terrain_obj, new_tex_url)
    local custom = terrain_obj.getCustomObject()
    custom['diffuse'] = new_tex_url
    terrain_obj.setCustomObject(custom)
    terrain_obj.reload()
end

-- Spawn a new terrain decoration, e.g. a tree, that will be part of
-- a terrain area (e.g. woods).
-- description: Parameters for describing the feature and its location
function spawn_terrain_decoration(description)
  local decoration = spawn_model(
    description.model_name,
    description.position,
    description.rotation.y,
    minimal_collider,  nil, nil, nil, true)
  decoration.setName(description.name)
  decoration.setPosition(description.position)
  decoration.setLock(true)
  description.hidden = False
  return decoration
end

function remove_colliding_terrain_feature(terrain_feature, base)
  print_debug("remove_colliding_terrain_feature " .. terrain_feature.name .. " " .. base.getName())
  if not terrain_feature.hidden then
    local feature_obj = get_object_by_name(terrain_feature.name)
    if nil ~= feature_obj then
      feature_obj.destruct()
    end
  end
  terrain_feature.hidden = true
end

-- Remove all the terrain features in a zone that collide with a
-- base
-- terrain_zone: Zone that may have terrain features to remove.
-- base: base that is entered or moved in the zone.
function remove_colliding_terrain_features(terrain_zone, base)
  print_debug("remove_colliding_terrain_features " .. terrain_zone.getName() .. " " .. base.getName())
  local features = get_decoration_for_obj(terrain_zone, "terrain features")
  if features == nil then
    return
  end
  for _,feature in ipairs(features) do
    remove_colliding_terrain_feature(feature, base)
  end
end

function onObjectEnterScriptingZoneTerrainArea(terrain_zone, obj)
  if is_base_obj(obj) then
    remove_colliding_terrain_features(terrain_zone, obj)
  end
end


function restore_terrain_feature(terrain_feature)
  if terrain_feature.hidden then
    local feature_obj = get_object_by_name(terrain_feature.name)
    if nil == feature_obj then
      spawn_terrain_decoration(terrain_feature)
    end
  end
end


function restore_terrain_features(terrain_zone)
  local features = get_decoration_for_obj(terrain_zone, "terrain features")
  if features == nil then
    return
  end
  for _,feature in ipairs(features) do
    restore_terrain_feature(feature)
  end
end

function onObjectLeaveScriptingZoneTerrainArea(terrain_zone, obj)
  stop_zone_timer(terrain_zone)
  if is_any_base_in_zone(terrain_zone) then
    return
  end
  -- in the future restore the building.
  local callback = function(zone)
    restore_terrain_features(zone)
  end

  start_zone_timer(terrain_zone, callback)
end

-- Return relative locations for terrain zones that will keep track of
-- terrain decorations.
-- zone_name: base name of the zones being created.
-- terrain_obj terrain we are creating the zones for.
-- terrain_decoration_descriptions: Descriptions of the decorations, rocks or terees, ...
-- that are to be controlled in a zone.
-- return: Zones with the decorations they should control.  The zones will have
-- position relative to (0,0,0) and will not be rotated.
function split_terrain_zones(zone_name,  terrain_obj, terrain_decoration_descriptions)
  if zone_name == nil then
    error("split_terrain_zones zone_name is nil")
    return
  end
  if terrain_obj == nil then
    error("split_terrain_zones terrain_obj is nil")
    return
  end
  if terrain_decoration_descriptions == nil then
    error("split_terrain_zones terrain_decoration_descriptions is nil")
    return
  end
  local zone_size = terrain_obj.getBoundsNormalized()['size']
  local far_left = -(zone_size.x)/2
  local nb_zones = math.ceil(zone_size.x / g_max_terrain_terrain_feature_zone_size)
  local zone_width = zone_size.x / nb_zones
  local zones = {}
  local half_zones = (nb_zones+1)/2.0
  for i=0,nb_zones-1,1 do
    local name = zone_name .. '-' ..  tostring(i+1)
    local zone_nb = ((i+1) - half_zones)
    local magnitude =  zone_nb * zone_width
    local current_rotation_y = from_degrees_to_rad(terrain_obj.getRotation())['y'] + (math.pi / 2.0)
    local displacement_vector = rad_to_vector(current_rotation_y)
    local position = vec_add(terrain_obj.getPosition(), vec_mul_escalar(displacement_vector, magnitude))

    local scale = {x=zone_width, y=zone_size.y, z=zone_size.z}
    zones[i] = {
      name = name,
      position = position,
      rotation = terrain_obj.getRotation(),
      scale = scale,
      type = 'ScriptingTrigger',
      terrain_decoration_descriptions={}
    }
  end
  for _, decoration in pairs(terrain_decoration_descriptions) do
    local bucket = math.floor((decoration.position.x - far_left) / g_max_terrain_terrain_feature_zone_size)
    if (bucket < 0) then
      print_warning("split_terrain_zones bucket invalid " .. tostring(bucket) .. '/' .. tostring(nb_zones))
      bucket = 0
    end
    if (bucket >= nb_zones) then
      print_warning("split_terrain_zones bucket invalid " .. tostring(bucket) .. '/' .. tostring(nb_zones))
      bucket = nb_zones - 1
    end
    table.insert( zones[bucket].terrain_decoration_descriptions, decoration)
  end
  return zones
end



-- terrain_obj: Terrain feature that is to be decorated
-- density: Density of decorations to add per a square inch.
-- objects: Desciption of the terrain features that can be created.
-- feature_name_prefix: Text to that will prepend the features created, e.g. "tree" or "rock".
-- return: List of the descriptions of the decorations,  The decorations
--   position will be relative to 0,0,0
function select_terrain_decorations(terrain_obj, density, objects, feature_name_prefix)
  if density == nil then
    print_warning(terrain_obj.getName() .. " density is nil")
    density = 0.1
  end
  local terrain_name = terrain_obj.getName()

  -- Get the locations where a tree can fit on the terrain area.
  local terrain_data = g_terrain_data[terrain_name]
  if terrain_data == nil then
    print_error("g_terrain_data[" .. terrain_name .. "] is nil, was the data generated in Blender?")
    return
  end
  local decoration_points = terrain_data['points']
  if decoration_points == nil then
    print_error("g_terrain_data[" .. terrain_name .. "]['points'] is nil, was the data generated in Blender?")
    return
  end
  local points = shallow_copy(decoration_points)
  local nb_points = #points
  -- points are placed at 1/2 inch intervals, so we use (1/2)^2 to transform
  -- number of points to square inches.
  local n_features = math.ceil(density * nb_points * 0.25)
  if n_features > nb_points then
    n_features = nb_points
  end

  local decorations = {}

  for i=1,n_features do
      -- Select a point at random
      local index = math.random(1, nb_points)
      local point = deep_copy(points[index])
      -- nil is only needed while the data points have yet to be regenerated.
      if point['y'] == nil then
        point['y'] = 0
      end
      points[index] = points[nb_points]
      nb_points = nb_points - 1

      local feature_name = feature_name_prefix .. " " .. tostring(i) .. " " .. terrain_name
      local description = {
        name = feature_name,
        model_name = random_element(objects),
        position = point,
        rotation = {x=0, y=math.random(0, 359), z=0}
      }
      table.insert(decorations, description)
  end
  return decorations
end

function spawn_terrain_zones(zones)
  for _,zone in pairs(zones) do
    zone.position.y = 2
    zone.scale.y = 4
    local terrain_zone = spawnObject(zone)
    terrain_zone.setName(zone.name)
    terrain_zone.setLock(true)
    set_decoration_for_obj(terrain_zone, "onObjectEnterScriptingZone",
      "onObjectEnterScriptingZoneTerrainArea")
    set_decoration_for_obj(terrain_zone, "onObjectLeaveScriptingZone",
      "onObjectLeaveScriptingZoneTerrainArea")
    set_decoration_for_obj(terrain_zone, "terrain features",
        zone.terrain_decoration_descriptions)
  end
end

-- Create terrain decorations for an area, e.g. trees for woods.
-- terrain_obj: the terrain area, e.g. the Woods.
-- density: Density of decorations to add per a square inch.
-- objects: Desciption of the terrain features that can be created.
-- feature_name_prefix: Text to that will prepend the features crated, e.g. "tree" or "rock".
function add_terrain_decorations(terrain_obj, density, objects, feature_name_prefix)
  local ran, retval = pcall( select_terrain_decorations, terrain_obj, density, objects, feature_name_prefix)
  if not ran then
    error("add_terrain_decorations select_terrain_decorations " .. retval .. " " .. terrain_obj.getName())
    return
  end
  local decorations = retval

  local terrain_size = terrain_obj.getBoundsNormalized()['size']
  local zone_name = "zone " .. terrain_obj.getName()
  local ran, retval = pcall( split_terrain_zones, zone_name,  terrain_obj, decorations)
  if not ran then
    error("add_terrain_decorations split_terrain_zones " .. retval)
    return
  end
  local zones = retval

  -- Spawn the decorations
  local terrain_pos = terrain_obj.getPosition()
  local terrain_rotation = terrain_obj.getRotation()
  local terrain_rotation_theta = normalize_angle(math.rad(terrain_rotation['y']))
  for _,zone in pairs(zones) do
    for _,decoration in ipairs(zone.terrain_decoration_descriptions) do
      decoration.position =
        rotate_point_relative(decoration.position, terrain_pos, terrain_rotation_theta)
      print_debug("3d_terrain " .. ' ' .. tostring(g_game_settings['3d_terrain']))
      if g_game_settings['3d_terrain'] == false then
        print_debug("Moving decoration down")
        decoration.position.y = g_terrain_pos
      end

      spawn_terrain_decoration(decoration)
    end
  end

  -- Spawn the zones
  local ran, retval = pcall( spawn_terrain_zones, zones)
  if not ran then
    error("add_terrain_decorations spawn_terrain_zones " .. retval)
    return
  end
end

-- Add tree decorations on a terrain object.
-- terrain_obj: Object that will receive the decorations.
-- density: Number of decorations per a square inch.
-- objects: Description of the terrain decorations that will be created.
-- e.g. instructions on how to create a tree.
function add_trees(terrain_obj,  density, objects)
  local ran, errorMsg = pcall(  add_terrain_decorations, terrain_obj, density, objects,  "tree")
  if not ran then
    error("add_trees add_terrain_decorations " .. errorMsg)
    return
  end
end

-- DBA calls woods "forrest"
-- Add terrain details for a Woods
-- terrain_obj:  The terrain object that will have the details added.
-- table_type: Type of terrain, arable, marsh, ...
function set_woods(terrain_obj, table_type)
    local options = g_terrain[table_type]['forest']
    local density = options['multiplier']
    local objects = options['objects']
    add_trees(terrain_obj,  density, objects)
    change_texture_terrain(terrain_obj, random_element(options['texture']))
end

-- Add terrain details for a gentle hill
-- terrain_obj:  The terrain object that will have the details added.
-- table_type: Type of terrain, arable, marsh, ...
function set_gentlehill(terrain_obj,  table_type)
  local options = g_terrain[table_type]['gentle_hill']
  local density = options['multiplier']
  local objects = options['objects']
  add_trees(terrain_obj,   density, objects)
end

-- Add terrain details for a Wooded hill
-- terrain_obj:  The terrain object that will have the details added.
-- table_type: Type of terrain, arable, marsh, ...
function set_woodedhill(terrain_obj, table_type)
  local options = g_terrain[table_type]['wooded_hill']
  local density = options['multiplier']
  local objects = options['objects']
  local ran, errorMsg = pcall( add_trees, terrain_obj,  density, objects)
  if not ran then
    print_error("set_woodedhill add_trees" .. errorMsg)
  end
end

-- Add terrain details for a steep hill
-- terrain_obj:  The terrain object that will have the details added.
-- table_type: Type of terrain, arable, marsh, ...
function set_steephill(terrain_obj, table_type)
  local options = g_terrain[table_type]['steep_hill']
  local density = options['multiplier']
  local objects = options['objects']
  add_trees(terrain_obj, density, objects)
end

-- Add rocks as decorations to a terrain object.
-- terrain_obj:
-- terrain_pos:
-- terrain_rotation:
-- density: Number of decorations to add per a square inch.
-- objects: Descriiptions on how to create the rocks.
function add_rocks(terrain_obj, terrain_pos, terrain_rotation, density, objects)
  add_terrain_decorations( terrain_obj,  density, objects,  "rock")
end

function set_rough(terrain_obj, terrain_pos, terrain_rotation, terrain_size, table_type)
  print_debug("IN set_rough " .. terrain_obj.getName())
  local options = g_terrain[table_type]['rough']
  local density = options['multiplier']
  local objects = options['objects']
  add_trees(terrain_obj,  density, objects)
  change_texture_terrain(terrain_obj, random_element(options['texture']))
  print_debug("OUT set_rough " .. terrain_obj.getName())
end

function set_oasis(terrain_obj, terrain_pos, terrain_rotation, terrain_size, table_type)
    local options = g_terrain[table_type]['oasis']
    local objects = options['objects']
    local density = 0.1
    add_terrain_decorations( terrain_obj,  density, objects,  "palm")
    change_texture_terrain(terrain_obj, random_element(options['texture']))
end

function set_marsh(terrain_obj, terrain_pos, terrain_rotation, terrain_size, table_type)
    local options = g_terrain[table_type]['marsh']
    local objects = options['objects']
    local density = 0.3
    add_terrain_decorations( terrain_obj, density, objects,  "palm")
    change_texture_terrain(terrain_obj, random_element(options['texture']))
end


function set_plough(terrain_obj, terrain_pos, terrain_rotation, terrain_size, table_type)
    local options = g_terrain[table_type]['plough']
    local objs_x = math.floor(terrain_size['x'])
    local margin_x = (terrain_size['x'] - objs_x) / 2
    local objs_z = math.floor(terrain_size['z'])
    local margin_z = (terrain_size['z'] - objs_z) / 2

    local plough_asset = first_value_table(options['objects'])

    for i=1,objs_x do
        for j=1,objs_z do
            local point = {
                x = margin_x + 0.5 + i - 1 - terrain_size['x'] / 2,
                y = 0,
                z = margin_z + 0.5 + j - 1 - terrain_size['z'] / 2
            }
            local new_pos = rotate_point_relative(point, terrain_pos, terrain_rotation)
            local obj = spawn_asset(plough_asset, new_pos, terrain_obj.getRotation()['y'])
            terrain_obj.addAttachment(obj)
        end
    end
    change_texture_terrain(terrain_obj, random_element(options['texture']))
end


-- Is the object a building scripting zone
function is_building_zone(obj)
  local obj_name = obj.getName()
  return str_starts_with(obj_name, 'zone bua building ')
end

-- Is the object a building?
function is_building(obj)
  local obj_name = obj.getName()
  return str_starts_with(obj_name, 'building #')
end

function is_any_base_in_zone(zone)
  for _,obj in pairs(zone.getObjects()) do
    if is_base_obj(obj) then
      local base_definition = get_base_definition_from_base_obj(obj)
      if not base_definition.prepared_defenses then
        return true
      end
    end
  end
  return false
end


function remove_colliding_buildings(zone)
  if not is_any_base_in_zone(zone) then
    return
  end
  local building_guid = get_decoration_for_obj(zone, "building_guid")
  if (building_guid == nil) then
    return
  end
  local building = getObjectFromGUID(building_guid)
  if building == nil then
    print_debug("building is nil: " .. tostring(building_guid))
  else
    destroyObject(building)
  end
  set_decoration_for_obj(zone, "building_guid", nil)
end

function restore_buildings(zone)
  if is_any_base_in_zone(zone) then
    print_debug("zone has a base")
    return
  end
  local bua_lot = get_decoration_for_obj(zone, "lot")
  if bua_lot == nil then
    print_error("bua_lot is nil")
    return
  end
  local building = spawn_building(bua_lot, zone)
end

function onObjectEnterScriptingZoneBuaLot(zone,obj)
  remove_colliding_buildings(zone)
end

function stop_zone_timer(zone)
  local timer_id = zone.getVar("timer")
  if timer_id ~= nil then
    -- stop the existing timer
    Wait.stop(timer_id)
    zone.setVar("timer", nil)
  end
end

function start_zone_timer(zone, timer_expired_callback)
  stop_zone_timer(zone)
  timer_id = Wait.time(function ()
    timer_expired_callback(zone)
  end, 3, 1)
  zone.setVar("timer", timer_id)
end

function onObjectLeaveScriptingZoneBuaLot(zone,obj)
  stop_zone_timer(zone)
  if is_any_base_in_zone(zone) then
    return
  end
  -- in the future restore the building.
  local callback = function(zone)
     restore_buildings(zone)
  end

  start_zone_timer(zone, callback)
end

-- Set the variables for the zone to indicate we are a building zone.
function setZoneBuaCallback(obj)
  set_decoration_for_obj(obj, "onObjectEnterScriptingZone",
    "onObjectEnterScriptingZoneBuaLot")
  set_decoration_for_obj(obj, "onObjectLeaveScriptingZone",
    "onObjectLeaveScriptingZoneBuaLot")
end

function create_bua_lot_zone(bua_lot, name)

  local size = shallow_copy(bua_lot.size)
  size.y = 4
  local zone_spawn = {
    position = bua_lot.position,
    rotation = bua_lot.rotation,
    scale = size,
    type = 'ScriptingTrigger'
  }
  local obj = spawnObject(zone_spawn)
  obj.setName(name)
  obj.setLock(true)

  obj.setTable("bua_lot", bua_lot)
  setZoneBuaCallback(obj)

  print_debug("bua zone created: " .. obj.getGUID())
  return obj
end

-- Add a building to a lot, so BUA has some buildings to show
-- lot: Location to place building
-- zone: scripting zone that will remove building on
-- intersection with a base.
function spawn_building(lot, zone)
  local building = spawn_model(
    lot.model_name,
    lot.position,
    lot.rotation.y,
    minimal_collider, true)
  building.setName(lot.name)
  building.setLock(true)
  set_decoration_for_obj(zone, "building_guid",  building.getGUID())
  set_decoration_for_obj(zone, "lot", lot)
  return building
end

g_building_number = 1


-- Find the location of buildings for a built up area.
-- terrain_obj: Built Up Area that is to have buildings placed onto it.
-- return: Structure describing the location of the buildings.
function calc_bua_lots(terrain_obj)
  local lots = {}

  local bua_properties = terrain_bua[terrain_obj.getName()]
  if bua_properties == nil then
    print_error("terrain_bua not found: " .. terrain_obj.getName())
    return lots
  end
  local terrain_size = bua_properties['habitable_area']
  if terrain_size == nil then
    print_error("habitable_area not found: " .. terrain_obj.getGUID())
    return lots
  end

  local lot_size = {x = 3,y=0, z= 2.25} -- size of land for a building
  local nb_cols = math.floor(terrain_size.x / lot_size.x)
  local nb_rows = math.floor(terrain_size.z / lot_size.z)
  if (nb_cols < 1) then
    lot_size.x = 0
    nb_cols = 1
  elseif nb_rows > 3 then
      nb_rows = 3
  end
  if (nb_rows <1) then
    lot_size.z = 0
    nb_rows = 1
  elseif nb_cols > 3 then
    nb_cols = 3
  end

  local terrain_pos = terrain_obj.getPosition()
  -- in degrees
  local terrain_rotation = terrain_obj.getRotation()
  -- in radians
  local terrain_rotation_y = - math.rad(terrain_rotation.y)

  local z = -(lot_size.z/2) * (nb_rows-1)
  for row = 1,nb_rows do
    local x = -(lot_size.x/2) * (nb_cols-1)
    for col = 1,nb_cols do
      local point = {x=x, y=0, z=z}
      local new_pos = rotate_point_relative(point, terrain_pos, terrain_rotation_y)
      local rotation_y =  normalize_degrees(terrain_rotation.y + (180 * ((row+1) % 2)))
      local corners = compute_corners_coords(lot_size, rotation_y, new_pos)
      local name = "building # " .. tostring(g_building_number)
      g_building_number = g_building_number + 1
      local shape = corners_to_shape(corners)
      local lot = {
        name = name,
        position = new_pos,
        rotation = { x=terrain_rotation.x, y=rotation_y, z=terrain_rotation.z},
        size = lot_size,
        shape = shape
      }
      table.insert(lots, lot)
      x = x + lot_size.x
    end
    z = z + lot_size.z
  end
  return lots
end

-- Add buildings to the Built Up Area (BUA) to make it look pretty.
-- terrain_obj: template of the BUA
-- terrain_rotation: float, y-axis rotation of BUA in radians
-- options: Source of data for BUA for the table type
function add_buildings(terrain_obj, terrain_rotation, options)
  local lots = calc_bua_lots(terrain_obj)
  for _,lot in pairs(lots) do
    lot.model_name = random_element(options['objects'])
    local zone_name = "zone bua building " .. terrain_obj.getGUID()
    local zone = create_bua_lot_zone(lot, zone_name)
    local building = spawn_building(lot, zone)
  end
end

function set_bua(terrain_obj, terrain_pos, terrain_rotation, terrain_size, table_type)
  local table_data = g_terrain[table_type]
  if table_data == nil then
    print_error("Unable to find terrain data for " .. tostring(table_type))
    return
  end
  local options = table_data['bua']
  if options == nil then
    print_error("bua options is nil for " .. tostring(table_type))
    return
  end

  local new_texture = random_element(options['texture'])
  change_texture_terrain(terrain_obj, new_texture)
  --terrain_obj.setLock(true)
  add_buildings(terrain_obj, terrain_rotation, options)
end

function set_enclosure(terrain_obj, terrain_pos, terrain_rotation, terrain_size, table_type)
    local options = g_terrain[table_type]['enclosure']
    local objs_x = math.floor(terrain_size['x'])
    local margin_x = (terrain_size['x'] - objs_x) / 2
    local objs_z = math.floor(terrain_size['z'])
    local margin_z = (terrain_size['z'] - objs_z) / 2

    local plough_asset = first_value_table(options['objects'])

    for i=1,objs_x do
        for j=1,objs_z do
            local point = {
                x = margin_x + 0.5 + i - 1 - terrain_size['x'] / 2,
                y = 0,
                z = margin_z + 0.5 + j - 1 - terrain_size['z'] / 2
            }
            local new_pos = rotate_point_relative(point, terrain_pos, terrain_rotation)
            local obj = spawn_asset(plough_asset, new_pos, terrain_obj.getRotation()['y'])
            terrain_obj.addAttachment(obj)
        end
    end

    local fence_asset = first_value_table(options['outline_objects'])
    for i=1,objs_x do
        local point_up = {
            x = margin_x + 0.5 + i - 1 - terrain_size['x'] / 2,
            y = 0,
            z = terrain_size['z'] / 2 - 0.1
        }
        local new_pos_up = rotate_point_relative(point_up, terrain_pos, terrain_rotation)

        local obj_up = spawn_model(fence_asset, new_pos_up, terrain_obj.getRotation()['y'], minimal_collider, true)
        terrain_obj.addAttachment(obj_up)

        local point_down = {
            x = margin_x + 0.5 + i - 1 - terrain_size['x'] / 2,
            y = 0,
            z = - terrain_size['z'] / 2 + 0.1
        }
        local new_pos_down = rotate_point_relative(point_down, terrain_pos, terrain_rotation)
        local obj_down = spawn_model(fence_asset, new_pos_down, terrain_obj.getRotation()['y'] + 180, minimal_collider, true)
        terrain_obj.addAttachment(obj_down)
    end

    for j=1,objs_z do
        local point_left = {
            x = - terrain_size['x'] / 2 + 0.1,
            y = 0,
            z = margin_z + 0.5 + j - 1 - terrain_size['z'] / 2
        }
        local new_pos_left = rotate_point_relative(point_left, terrain_pos, terrain_rotation)
        local obj_left = spawn_model(fence_asset, new_pos_left, terrain_obj.getRotation()['y'] + 90, minimal_collider, true)
        terrain_obj.addAttachment(obj_left)

        local point_right = {
            x = terrain_size['x'] / 2 - 0.1,
            y = 0,
            z = margin_z + 0.5 + j - 1 - terrain_size['z'] / 2
        }
        local new_pos_right = rotate_point_relative(point_right, terrain_pos, terrain_rotation)
        local obj_right = spawn_model(fence_asset, new_pos_right, terrain_obj.getRotation()['y'] + 270, minimal_collider, true)
        terrain_obj.addAttachment(obj_right)
    end
    change_texture_terrain(terrain_obj, random_element(options['texture']))
end

function process_vegetation(terrain_obj, type)
    print_debug("IN process_vegetation")
    local terrain_pos = terrain_obj.getPosition()
    local terrain_rotation_theta = normalize_angle(math.rad(terrain_obj.getRotation()['y']))
    local terrain_size = terrain_obj.getBoundsNormalized()['size']
    if str_starts_with(terrain_obj.getName(), 'terrain Woods') then
        set_woods(terrain_obj, type)
    elseif str_starts_with(terrain_obj.getName(), 'terrain Rough') then
        set_rough(terrain_obj, terrain_pos, terrain_rotation_theta, terrain_size, type)
    elseif str_starts_with(terrain_obj.getName(), 'terrain Wooded Hill') then
        set_woodedhill(terrain_obj, type)
    elseif str_starts_with(terrain_obj.getName(), 'terrain Gentle Hill') then
          set_gentlehill(terrain_obj, type)
    elseif str_starts_with(terrain_obj.getName(), 'terrain Steep Hill') then
          set_steephill(terrain_obj, type)
    elseif str_starts_with(terrain_obj.getName(), 'terrain Oasis') then
        set_oasis(terrain_obj, terrain_pos, terrain_rotation_theta, terrain_size, type)
    elseif str_starts_with(terrain_obj.getName(), 'terrain Ploughed Fields') then
        set_plough(terrain_obj, terrain_pos, terrain_rotation_theta, terrain_size, type)
    elseif str_starts_with(terrain_obj.getName(), 'terrain Enclosure') then
        set_enclosure(terrain_obj, terrain_pos, terrain_rotation_theta, terrain_size, type)
    elseif str_starts_with(terrain_obj.getName(), 'terrain Marsh') then
        set_marsh(terrain_obj, terrain_pos, terrain_rotation_theta, terrain_size, type)
    elseif str_starts_with(terrain_obj.getName(), 'terrain Village') then
        set_bua(terrain_obj, terrain_pos, terrain_rotation_theta, terrain_size, type)
    end
    print_debug("OUT process_vegetation")
end


function get_prepared_defense_detail_obj(detail_data)
  local detail_guid = detail_data['guid']
  if detail_guid == nil then
    return nil
  end
  local detail_obj = getObjectFromGUID(detail_guid)
  return detail_obj
end

function restore_prepared_defense_detail(zone)
  if is_any_base_in_zone(zone) then
    return
  end
  local detail_data = get_decoration_for_obj(zone, "detail")
  local detail_obj = get_prepared_defense_detail_obj(detail_data)
  if nil ~= detail_obj then
    return
  end
  local model_name = detail_data['model_name']
  local pos = detail_data['pos']
  local rotation = detail_data['rotation']
  local detail = spawn_model(
      model_name,
      pos,
      rotation,
      minimal_collider,  nil, nil, nil, true)
  detail_data['guid'] = detail.getGUID()
end

function remove_prepared_defense_detail(zone)
  if not is_any_base_in_zone(zone) then
    return
  end
  local detail_data = get_decoration_for_obj(zone, "detail")
  local detail_obj = get_prepared_defense_detail_obj(detail_data)
  if nil == detail_obj then
    return
  end
  destroyObject(detail_obj)
  detail_data['guid'] = nil
end

function onObjectEnterScriptingZonePreparedDefense(zone,obj)
  remove_prepared_defense_detail(zone)
end

function onObjectLeaveScriptingZonePreparedDefense(zone,obj)
  stop_zone_timer(zone)
  if is_any_base_in_zone(zone) then
    return
  end
  -- in the future restore the detail
  local callback = function(zone)
    restore_prepared_defense_detail(zone)
  end

  start_zone_timer(zone, callback)
end

---- Set the variables for the zone to indicate we are a prepared defense zone
function setZonePreparedDefenseCallback(obj)
  set_decoration_for_obj(obj, "onObjectEnterScriptingZone",
    "onObjectEnterScriptingZonePreparedDefense")
  set_decoration_for_obj(obj, "onObjectLeaveScriptingZone",
    "onObjectLeaveScriptingZonePreparedDefense")
end


-- Return the models can be used for the base definition
function get_prepared_defense_models(base_definition)
  local description = string.upper(base_definition.description)
  local models = {}
  if str_has_substr(description, "STAKE") then
    table.insert(models, 'terrain_chevaux_de_frise')
  end
  if str_has_substr(description, "PALISADE") then
    table.insert(models, 'terrain_palisade')
  end
  if str_has_substr(description, "STONE") or str_has_substr(description, "ROCK") then
    table.insert(models, 'terrain_rock_wall')
  end
  if tlen(models) == 0 then
    table.insert(models, 'terrain_palisade')
    table.insert(models, 'terrain_chevaux_de_frise')
    table.insert(models, 'terrain_rock_wall')
  end
  return models
end


-- Return the model that should be used for a base definition
function get_prepared_defense_model(base_definition)
  local models = get_prepared_defense_models(base_definition)
  return random_element(models)
end


-- Add 3d terrain extras to make the prepared defense look nicer
function add_prepared_defenses_decorations(prepared_defense)
  if not g_game_settings['terrain_decorations'] then
      return
  end

  local base_definition = get_base_definition_from_base_obj(prepared_defense)
  if base_definition == nil then
    return
  end
  local model_name = get_prepared_defense_model(base_definition)
  local pos = prepared_defense.getPosition()
  local rotation = prepared_defense.getRotation()['y'] 
  detail_data = {
    model_name = model_name,
    pos = pos,
    rotation = rotation,
    prepared_defense = prepared_defense.getGUID()
  }

  local zone_name = "zone " .. prepared_defense.getName()
  local scale = prepared_defense.getScale()
  zone_spawn = {
    name = zone_name,
    position = pos,
    rotation = prepared_defense.getRotation(),
    scale = scale,
    type = 'ScriptingTrigger',
    terrain_decoration_descriptions={}
  }
  local zone = spawnObject(zone_spawn)
  zone.setLock(true)
  setZonePreparedDefenseCallback(zone)
  set_decoration_for_obj(zone, 'detail', detail_data)
  restore_prepared_defense_detail(zone)
end
