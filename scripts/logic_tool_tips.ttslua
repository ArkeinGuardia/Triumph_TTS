
----------------------------------------------
-- Tool tips
----------------------------------------------

g_tool_tips_enabled = true

function print_tool_tip_status()
  if g_tool_tips_enabled then
    print_info("Tool tips enabled")
  else
    print_info("Tool tips disabled")
  end
end

function toggle_tool_tips()
  g_tool_tips_enabled = not g_tool_tips_enabled
  print_tool_tip_status()
  update_tool_tips()
end

function update_tool_tips()
  for _,base_obj in pairs(get_all_bases()) do
    update_tool_tip(base_obj)
  end
end

function update_tool_tip(base_obj)
  local tip = get_tool_tip_for_base(base_obj)
  base_obj.setDescription(tip)
end


-- base_obj: base object
-- return: battle card for the base or empty string.
function get_battle_card_for_base_obj(base_obj)
  local base_definition = get_base_definition_from_base_obj(base_obj)
  if nil == base_definition then
    return ""
  end

  local tip = ""
  local dismounts_as = base_definition['dismount_as']
  if dismounts_as ~= nil then
    local dismounts_as_definition = _G[dismounts_as]
    if nil ~= dismounts_as_definition then
      local dismounts_name = dismounts_as_definition['name']
      tip = "Dismounts as " .. dismounts_name .. "\n"
    end
  end

  local battle_card = base_definition['battle_card']
  if nil ~= battle_card then
    tip = tip .. battle_card
  end
  return tip
 end

function get_tool_tip_for_base(base_obj)
  if not g_tool_tips_enabled then
    return nil
  end
  if base_obj == nil then
    return nil
  end
  local base_name = base_obj.getName()

  local description = nil
  local base_definition = get_base_definition_from_base_obj(base_obj)
  if nil == base_definition then
    print_debug("no base definition for ", base_name)
  else
    description = base_definition['description']  
  end
  if description == nil then
    description = ""
  end

  local tip =
    get_tool_tip_for_base_definition(base_definition) ..
    get_battle_card_for_base_obj(base_obj) ..
    description
  return tip
end

function get_tool_tip_for_base_definition(base_definition)
  if base_definition == nil then
    return ""
  end
  local type = base_definition.troop_type
  if type == nil then
    return ""
  end
  return get_tool_tip(type)
end

-- Example: "base Archers # 20" returns "Archers"
function get_base_type_from_name(base_name)
  local type = (base_name:gsub("base (.+) #.*", "%1"))
  if type == base_name then
    return nil -- no match.  this is an error
  end
  type = str_remove_suffix(type, "*")
  type = str_remove_suffix(type, "  General")
  return type
end

-- Singleton.  Cache of tool tips for base type
g_tool_tips = {}

-- base_type: name of the base type, e.g. "Archers"
function get_tool_tip(base_type)
  if not g_tool_tips_enabled then
    return nil
  end
  local tip = g_tool_tips[base_type]
  if tip ~= nil then
    return tip
  end
  tip = build_tool_tip(base_type)
  g_tool_tips[base_type] =  tip
  return tip
end

function build_tool_tip_string_tactical_movement(tip_data)
 if nil == tip_data.tactical_move_distance then
   return ""
  end
  return tostring(tip_data.tactical_move_distance) .. " MU\n"
 end

function build_tool_tip_string_ranged_combat(tip_data)
  local shooting
  if tip_data.shooting_combat_factor == nil then
    shooting = ""
  else
    shooting = tostring(tip_data.shooting_combat_factor)
  end
  local target = ""
  if tip_data.target_combat_factor == nil then
    -- error condition, item missing from tip_data
    target = "X"
  else
    target = tostring(tip_data.target_combat_factor)
   end
  return string.format("ranged combat: %s/%s\n", shooting, target)
end

function build_tool_tip_string_close_combat(tip_data)
  local foot
  if tip_data.combat_factor_vs_foot == nil then
    foot = "X"
  else
    foot = tostring(tip_data.combat_factor_vs_foot)
  end
  local mounted = ""
  if tip_data.combat_factor_vs_mounted == nil then
    -- error condition, item missing from tip_data
    mounted = "X"
  else
    mounted = tostring(tip_data.combat_factor_vs_mounted)
   end
  return string.format("close combat: %s/%s\n", foot, mounted)
end


function build_tool_tip_string(tip_data)
  result = build_tool_tip_string_tactical_movement(tip_data)
  result = result .. build_tool_tip_string_ranged_combat(tip_data)
  result = result .. build_tool_tip_string_close_combat(tip_data)
  return result
end

function build_tool_tip(base_type)
  local tip_data = base_tool_tips[base_type]
  if tip_data == nil then
    return ""
  end
  local result = build_tool_tip_string(tip_data)
  return result
end
