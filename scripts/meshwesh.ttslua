
-- Spawn an army based on the army Identifier
-- army_id: Meshwesh ID for the army.
-- player: either "red" or "blue"
-- command_color
function spawn_meshesh_army(army_id, player, command_color)
print(6)
  local army_definition = army[army_id]
print(9)
  if army_definition == nil then
    print_error("No army available with ID " .. tostring(army_id))
    return
  end
print(14)
  local army_name = army_definition['data']['name']
  local is_red_player = (player == "red")
  if command_color == nil then
    command_color = player
  end
  print("BEFORE spawn army")
  spawn_army(army_name, army_definition, is_red_player, command_color)
  print("AFTER spawn army")
end


function has_one_option(data_point)
  return tlen(data_point) ==1 and (nil == data_point[1]['note'] )
end

function get_sole_option(data_point)
    if not has_one_option(data_point) then
      return nil
    end
    return data_point[1]['value']
end


g_troop_type_code_to_name = {
    CHT = "Chariots",
    RDR = "Raiders",
    ARC = 'Archers',
    EFT = 'Elite Foot',
    HFT = 'Heavy Foot',
    LFT = 'Light Foot',
    BLV = 'Bow Levy',
    PAV = 'Pavisiers',
    SKM = 'Skirmishers',
    WBD = 'Warband',
--  valid['Light Spear']=true
--  valid['Rabble']=true
--  valid['Raiders']=true
--  valid['Artillery']=true
--  valid['Horde']=true
--   -- Appendix A uses "Pike"
--  valid['Pikes']=true
--  ---- Appendix A uses "Spear"
  --valid['Spears']=true
  --valid['War Wagons']=true
  --valid['Warriors']=true
--  valid['Bad Horse']=true
  --valid['Battle Taxi']=true
--  valid['Chariots']=true
  --valid['Elite Cavalary']=true
  --valid['Horse Bow']=true
--  valid['Javelin Cavalry']=true
  --valid['Knights']=true
--  valid['Cataphracts']=true
--  valid['Elephants']=true
}


-- TODO   plain bases  go here
g_default_models = {}
g_default_models['Chariots'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Raiders'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Archers'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models[ 'Elite Foot'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Heavy Foot'] = {
      base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Light Foot'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Bow Levy'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Pavisiers'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Skirmishers'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Warband'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Chariots General'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Raiders General']= {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Archers General'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Elite Foot General'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Heavy Foot General'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Light Foot General'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Bow Levy General'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Pavisiers General'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models['Skirmishers General'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }
g_default_models[ 'Warband General'] = {
        base = 'tile_grass_40x40',
        n_models = 1,
        model_data = 'troop_successors_art'
    }


-- Get the definitions of the models
-- troop_entry_id: Identifier of the troopEntries member in
-- meshwesh
-- name: Name of the troop.
function get_models(troop_entry_id, name)
  -- TODO lookup to see if there is a definition for the troop entry ID
  local models = g_default_models[name]
  if models == nil then
    print_error("no default models for " .. tostring(name))
  end
  return models
end


-- return nil on error
function troop_option_to_base_definition(troop_option)
    if tlen(troop_option.troopEntries) ~= 1 then
      print_error("incorrect number of troopEntries")
      return nil
    end
    local troop_entry = troop_option.troopEntries[1]
    local name = g_troop_type_code_to_name[troop_entry.troopTypeCode]
    if name == nil then
        print_error("No name for: " .. troop_entry.troopTypeCode)
        return nil
    end
    local definition = {
        name=name,
        min = troop_option.min,
        max = troop_option.max,
        description = troop_option.description,
        id = troop_entry._id
    }
    if troop_option.battleCardEntries ~= nil then
        local nb_battle_cards = tlen(troop_option.battleCardEntries)
        if nb_battle_cards > 1 then
            print_error("wrong number of battle cards :" .. tostring(nb_battle_cards))
        elseif nb_battle_cards == 1 then
            definition.battle_card = troop_option.battleCardEntries[1]
        end
    end
    -- TODO dismount_as
    -- TODO note

    -- Define the models
    local models = get_models(troop_entry, name)
    if models == nil then
      print_error("Unable to get models " .. troop_entry._id)
      return nil
    end
    for k,v in pairs(models) do
      definition[k] = v
    end

    return definition
end

-- Convert the army from the meshwesh JSON object to the format used
-- internally for spawn_army
function meshwesh_to_lua_army(json)
  local army = {}
  army['data']={}
  army['data']['name'] = json.derivedData.extendedName

  -- For now we are not handling options such as different years,
  -- or armies
  army['data']['Invasion']=get_sole_option(json['invasionRatings'])
--  army['data']['terrain']="TODO"
  --army['data']['general']="TODO"
  --army['data']['manufacturer']="TODO"
  --army['data']['list']="TODO"


  -- add the bases
  local troop_type_definitions = {}
  for _,troop_option in pairs(json['troopOptions']) do
    local base_defintion = {}
    if tlen(troop_option.troopEntries) ~= 1 then
      print_error("incorrect number of troopEntries")
    else
      local base_definition = troop_option_to_base_definition(troop_option)
      if base_definition ~= nil then
        -- TODO we will need to base defintion accessible for dismounting
        table.insert(army, base_definition)
        troop_type_definitions[ base_definition.name] = base_definition
      end
    end
  end
  -- Generals
  if json.troopEntriesForGeneral == nil then
    print_error("No general")
  else
    for _,troop_entries_for_general in pairs(json.troopEntriesForGeneral) do
      local troop_entries = troop_entries_for_general.troopEntries
      for _,troop_entry in pairs(troop_entries) do
        local troopTypeCode = troop_entry.troopTypeCode
        local name = g_troop_type_code_to_name[ troop_entry.troopTypeCode]
        if name == nil then
          print_error("No name for " .. tostring(troop_entry.troopTypeCode))
        else
          local orig = troop_type_definitions[name]
          if orig == nil then
            print_error("No base definition for " .. tostring(name))
          else
            local base_definition = shallow_copy(orig)
            base_definition.max = 1
            base_definition.min = 0
            base_definition.name = base_definition.name .. " General"
            -- Define the models
            local models = get_models(troop_entry, base_definition.name)
            if models == nil then
              print_error("Unable to get models " .. troop_entry._id)
              return nil
            end
            for k,v in pairs(models) do
              base_definition[k] = v
            end
            -- TODO we will need to base defintion accessible for dismounting
            table.insert(army, base_definition)
            troop_type_definitions[ base_definition.name] = base_definition
          end
        end
      end
    end
  end

  return army
end

