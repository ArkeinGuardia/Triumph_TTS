-- FROM http://lua-users.org/wiki/SimpleStack
-- Simple Stack
-- lua-users home
-- 	wiki

-- The following is a simple implementation of a stack via a Lua table. The function Stack:Create() will return a table with stack like functions such as pop and push. Multiple elements can be pushed/pop in a single call.
-- Example usage:

-- -- create stack
-- stack = Stack:Create()
-- -- push values on to the stack
-- stack:push("a", "b")
-- -- pop value
-- stack:pop()

-- Stack Table
-- Uses a table as stack, use <table>:push(value) and <table>:pop()
-- Lua 5.1 compatible

-- GLOBAL
Stack = {}

-- Create a Table with stack functions
function Stack:Create()

  -- stack table
  local t = {}
  -- entry table
  t._et = {}

  -- push a value on to the stack
  function t:push(v)
    table.insert(self._et, v)
  end

  -- Empty the contents of the stack
  function t:clear()
    self._et = {}
    return self
  end

    -- Return top element from stack or nil if there is none
    function t:top()
      if #self._et == 0 then
        return nil
      end

      return self._et[#self._et]
    end

    
  -- pop a value from the stack
  function t:pop()

    if #self._et == 0 then
      return nil
    end

    -- get last entry
    result = self._et[#self._et]
    -- remove last value
    table.remove(self._et)

    return result
  end

  -- Remove the item at the bottom of the stack
  function t:pop_front() 
    if #self._et == 0 then
      return nil
    end
    -- get oldest entry
    result = self._et[1]
    -- remove last value
    table.remove(self._et, 1)

    return result
  end


  -- get entries
  function t:size()
    return #self._et
  end

  -- Call the function on all the elements in the tble
  function t:apply(fn)
    for i,v in pairs(self._et) do
      fn(v)
    end
  end

  -- list values
  function t:list()
    for i,v in pairs(self._et) do
      print(i, v)
    end
  end
  return t
end

