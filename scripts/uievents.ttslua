require("Triumph_TTS/scripts/armies")
require("Triumph_TTS/scripts/zoc")

-- Global number of MU to move
g_mu_movement = 3

function update_button_move_forward()
    -- It's undocumented, but changing the value of the button does not update
    -- the button_move_forward
    -- Instead we have to change the undocumented text attribute, but we still
    -- change the value because it's the proper thing
    UI.setAttribute('button_move_forward', 'text', 'Move ' .. g_mu_movement .. ' MU')
    UI.setValue('button_move_forward', 'Move ' .. g_mu_movement .. ' MU')
end

-- Update the slider and button based on the desired amount to move.
-- value: amount that is wanted to move.
function update_move_controls(value)
    g_mu_movement = round_to_decimals(value, 1)

    if math.abs(g_mu_movement - 1) < g_ui_snap_slider_movement then
        g_mu_movement = 1
    elseif math.abs(g_mu_movement - 2) < g_ui_snap_slider_movement then
        g_mu_movement = 2
    elseif math.abs(g_mu_movement - 3) < g_ui_snap_slider_movement then
        g_mu_movement = 3
    end
    
    -- Make it consistent for all players
    Wait.frames(function()
        UI.setAttribute('slider_MUs', 'value', value)
        update_button_move_forward()
    end, 1)

    -- Update any gizmo
    draw_all_gizmos()
end

-- Updates the global that manages the number of MUs moved by the other functions, and updates the UI
function slider_MUs_changed(player, value, id)
  update_move_controls(value)
end

function move_bases(player, value, id)
    local objs = filter_bases(player.getSelectedObjects())
    if tlen(objs) < 1 then
        print_warning(player.steam_name ..' is trying to move, but (s)he has no object selected, ignoring')
    return
    end

    for _,obj in ipairs(objs) do
        local moved = move_base(obj, from_mu_to_in(g_mu_movement), true)

        print_info(player.steam_name .. ' is moving ' .. obj.getName() .. ' '
            .. from_in_to_mu(moved) .. ' MU forward')
    end

    -- Moving the bases should imply update the gizmos
    draw_all_gizmos()
    history_record_delta_snapshot()
end

function align_bases(player, value, id)
    local objs = filter_bases(player.getSelectedObjects())
    local n_objs = tlen(objs)
    if n_objs < 2 then
        print_error(player.steam_name ..' is trying to align ' .. n_objs .. ' bases, which is not supported')
        return
    end
    table.sort(objs, function(l, r)
        return l.getPosition()['x'] < r.getPosition()['x']
    end)

    -- Moving will mean that some attributes like the corner change, but they
    -- won't update on the object until next frame. However we still have to
    -- take into account here to aligning all the pieces together
    local future_transform = {}
    future_transform[objs[1].getName()] = calculate_transform(objs[1])

    for i=2,n_objs do
        local pos = objs[i].getPosition()
        local corners = compute_corners_base(objs[i])
        local transform = get_closest_transform(corners["topleft"], future_transform)

        local distance_centers = distance_points_flat_sq(transform['position'], pos)
        if (distance_centers > g_max_distance_alignment) then
            print_error(player.steam_name .. ' is trying to align but the bases are too far apart, more than 3inch between centers!')
            return
        end

        future_transform[objs[i].getName()] = align_two_bases(
            objs[i],
            transform['position'],
            transform['corners'],
            transform['rotation'])
    end

    -- Moving the bases shpuld imply update the gizmos
    draw_all_gizmos()
end

function on_cancel_load_army(player, value, id)
    UI.setAttribute('panel_dba_troop_selection', 'active', false)
    UI.setAttribute('panel_dba_troop_selection_bg', 'active', false)
    UI.setAttribute('panel_dba_troop_selection', 'visibility', '')
    UI.setAttribute('panel_dba_troop_selection_bg', 'visibility', '')
    UI.setAttribute('button_create_army', 'interactable', true)
end

-- is low <= mid <= high?
function between(low, mid, high)
  if low > mid then
    return false
  end
  if mid > high then
    return false
  end
  return true
end


-- Do two date ranges have a comon period
function date_ranges_intersect(a,b)
  if  between(b.startDate, a.startDate, b.endDate) then
    return true
  end
  if  between(b.startDate, a.endDate, b.endDate) then
    return true
  end
  if between(a.startDate, b.startDate, a.endDate) then
    return true
  end
  if between(a.startDate, b.endDate, a.endDate) then
    return true
  end
  return false
end

-- Compute the army that is to be used for a date range.
-- army: army to filter, not modified
-- date_range: {startDate, endDate} of the army components that
--   should be filtered in.
-- return: army with base definitions filterd
function filter_base_definitions_by_date(army, date_range)
  filtered = deep_copy(army)
  for k,base_definition in pairs(filtered) do
    if k ~= "data" then
      local base_definition_date_range = get_base_definition_date_range(base_definition)
      if not date_ranges_intersect(base_definition_date_range, date_range) then
        filtered[k] = nil
      end
    end
  end
  return filtered
end

function get_command_color(army_nb, color)
  if (color == 'red') then
    if army_nb == 1 then
      return "Red"
    elseif army_nb == 2 then
      return "Yellow"
    else
      return "Orange"
    end
  else
    if army_nb == 1 then
      return "Blue"
    elseif army_nb == 2 then
      return "Green"
    else
      return "Purple"
    end
  end
end

function load_army_for_player(color)
  local army_id_selected = g_game_settings['army_id'][color]
  local year_selected = g_game_settings['year_selected'][color]
  local date_range = army_dates[army_id_selected][year_selected]
  local army_nb = 1
  local is_red_player = (color == 'red')
  local filtered_army = filter_base_definitions_by_date(
    army[army_id_selected],
    date_range)
  local command = get_command_color(army_nb, color)
  spawn_army(
    filtered_army,
    is_red_player,
    command,
    army_nb)
  army_nb = army_nb + 1
  set_tablet(is_red_player, army[army_id_selected])

  -- Spawn the allies
  for _, ally_army_id in pairs(g_game_settings['selected_allies'][color]) do
      local ally_army = army[ally_army_id]
      if (ally_army == nil) then
        print_error("army missing for " .. tostring(ally_army_id))
        return
      end
      local filtered_army = filter_base_definitions_by_date(
        ally_army,
        date_range)
      local command = get_command_color(army_nb, color)
      spawn_army(
        filtered_army,
        is_red_player,
        command,
        army_nb)
      army_nb = army_nb + 1
  end
end

function on_load_army(player, value, id)
    load_army_for_player('red')
    load_army_for_player('blue')

    UI.setAttribute('panel_dba_troop_selection', 'active', false)
    UI.setAttribute('panel_dba_troop_selection_bg', 'active', false)
    UI.setAttribute('panel_dba_troop_selection', 'visibility', '')
    UI.setAttribute('panel_dba_troop_selection_bg', 'visibility', '')
    UI.setAttribute('button_create_army', 'interactable', true)
    if g_load_army_callback then
      g_load_army_callback()
    end
end

function is_army_with_models(army)
  local result = (army ~= nil) and (army.data ~= nil) and (army.data.has_models == true)
  return result
end

-- Should the army be displayed for deployment?
-- Based on the army having enough models to match the users filter.
function is_army_filtered_in(army)
  if not g_filter_armies_models then
    return true
  end
   return is_army_with_models(army)
end




g_use_plain_bases = false

-- Indication that the preference to use use plain bases or models has been made.
function on_use_plain_bases(player, value, id)
    g_use_plain_bases = (value == "True")
    UI.setAttribute('toggle_use_plain_bases', 'isOn', g_use_plain_bases)
end

function on_filter_models(player, value, id)
    g_filter_armies_models = (value == "True")
    on_next_frame(function()
        update_deploy_army_dialog()
    end)
end

-- Update the dialog values for deploying an army based on
-- the global variables.
function update_deploy_army_dialog()
  if g_ui_busy then
    print_important('UI is updating, please try again')
    return
  end
  -- UI elements do not update correctly in TTS if there is more than
  -- one element updated in a frame.
  local functions = {
    function () g_ui_busy = true end,
    function () UI.setAttribute("panel_dba_troop_selection_shield", "active", true) end,
    function ()
      UI.setAttribute("panel_dba_troop_selection_shield", "active", true)
      UI.setAttribute('toggle_filter_models', 'isOn', g_filter_armies_models)
      local xml = UI.getXmlTable()
      update_theme_menu(xml)
      update_armies_menu(xml, 'red')
      update_armies_menu(xml, 'blue')
      update_years_menu(xml, 'red')
      update_years_menu(xml, 'blue')
      update_army_counts(xml)
      UI.setXmlTable(xml)
    end,
    function () end,
    function () update_allies_menu('red') end,
    function () update_allies_menu('blue') end,
    function () g_ui_busy =false end,
    function () UI.setAttribute("panel_dba_troop_selection_shield", "active", false) end,
 }

  function call(pos)
    if functions[pos] == nil then
      return
    end
    functions[pos]()
    on_next_frame(function()
      call(pos+1)
    end)
  end

  call(1)
end

function create_army_options_menu(player, value, id)
    local status = UI.getAttribute('panel_dba_troop_selection', 'active')
    if status == 'True' then
        -- Ignore, the user is clicking despite the menu already being there
        return
    end

    on_next_frame(function()
        UI.setAttribute('panel_dba_troop_selection_bg', 'active', true)
        UI.setAttribute('panel_dba_troop_selection', 'active', true)
        UI.setAttribute('button_create_army', 'interactable', false)

        update_deploy_army_dialog()
    end)
end

-----------------------------------------------------------
-- BEGIN global variables to indicte which army to deploy.
-----------------------------------------------------------

-- Should only armies with models be displayed as an option for deployment.
-- Boolean
g_filter_armies_models = false

-- Name of the selected theme. e.g. "Cradle of Civilization"
g_theme_selected = nil



-----------------------------------------------------------
-- END global variables to indicte which aremy to deploy.
-----------------------------------------------------------



-- Should the theme be displayed
function is_theme_filtered_in(theme_name)
    local themes_armies = armies[theme_name]
    for army_name,army in pairs(themes_armies) do
        if is_army_filtered_in(army) then
            return true
        end
    end
    return false
end


-- Comapre the names of two themes to indicate the display sort order.
function theme_compare(a,b)
  -- V1 goes to the top
  local a_v1 = str_starts_with(a,"v1 ")
  local b_v1 = str_starts_with(b,"v1 ")
  if a_v1 and not b_v1 then
    return true
  end
  if b_v1 and not a_v1 then
    return false
  end
  if a_v1 and b_v1 then
    return a < b
  end

  -- All should be last
  local a_all = (a == "All")
  if a_all then
    return false
  end
  local b_all = (b == "All")
  if b_all then
    return true
  end

  -- Meshwesh special lists go at the end before all.
  if str_starts_with(a, "Meshwesh") then
    return false
  end
  if str_starts_with(b, "Meshwesh") then
    return true
  end

  return a < b
end

function count_armies()
  local nb_armies = 0
  local nb_armies_with_models = 0
  for name, army in pairs(armies['All']) do
    nb_armies = nb_armies + 1
    if is_army_with_models(army) then
      nb_armies_with_models = nb_armies_with_models + 1
    end  
  end
  return {nb_armies=nb_armies, nb_armies_with_models=nb_armies_with_models}
end

g_army_counts = count_armies()

-- Update the number of armies that can be chosen.
-- xml:  Result of UI.getXmlTable() that will be modified.
function update_army_counts(xml)
  local counts = count_armies()
  local count_str = tostring(g_army_counts.nb_armies_with_models) .. '/' .. tostring(g_army_counts.nb_armies)
  UI.setAttribute("nb_armies", "text", count_str)
end


-- Update the menu item for all the themes that match the filter criteria.
-- filtered on model availablity.
-- Updates g_theme_selected
-- xml:  Result of UI.getXmlTable() that will be modified.
function update_theme_menu(xml)
    local selected = nil
    local selected_index = nil
    local options = {}
    local index = 0
    for theme, army_name in pairsByKeys(armies, theme_compare) do
        if is_theme_filtered_in(theme) then
            index = index + 1
            table.insert(options, theme)
            if g_theme_selected == theme then
              selected = theme
              selected_index = index
            end
        end
    end
    if selected == nil then
      selected = options[1]
      selected_index = 1
    end
    g_theme_selected = selected
    set_options_dropdown_by_id_xml(xml, 'dropdown_book', options, selected_index)
end


-- xml:  result of UI.getXmlTable() that is being modified
-- color: 'red' or 'blue'
function update_armies_menu(xml, color)
    local army_id_selected = g_game_settings['army_id'][  color]
    local selected_army_id = nil
    local selected_index = nil
    -- Sort by army name alphabetically
    local options = {}
    local index = 0
    local armies_in_theme = armies[g_theme_selected]
    for army_name, army_table in pairsByKeys(armies_in_theme) do
        if army_table == nil then
          print_error("army_table is nil for ", army_name, ' ', g_theme_selected)
          return
        end
        if is_army_filtered_in(army_table) then
            index = index + 1
            table.insert(options, army_name)
            if army_id_selected == army_table.data.id then
              selected_army_id = army_id_selected
              selected_index = index
            end
        end
    end
    assert(index > 0)
    if selected_army_id == nil then
      selected_index = 1
      local selected_army_name = options[1]
      local selected_army = armies[g_theme_selected][selected_army_name]
      selected_army_id = selected_army.data.id
    end
    g_game_settings['army_id'][color] = selected_army_id

    local menu_name = "dropdown_army_" .. color
    set_options_dropdown_by_id_xml(xml, menu_name, options, selected_index)
end

-- Update the years menu based on the selction.
-- The menu contents are filled based on the contents of the global variableS
-- g_game_settings
-- xml: Result of UI.getXmlTable() that is being modified
-- color: 'red' or 'blue'
function update_years_menu(xml, color)
     local army_id_selected = g_game_settings['army_id'][color]
     local year_selected = g_game_settings['year_selected'][color]
     if army_id_selected == nil then
       print_error("army_id_selected is nil")
       return
     end
     local selected = nil
     local selected_index = nil
     local options = {}
     index = 0
     local dates_for_army = army_dates[army_id_selected]
     assert(nil ~= dates_for_army)

     -- skip the selected army?  If there are multiple time periods do
     -- not include the all encompassing period.
     local skip = nil
     if tlen(dates_for_army) > 1 then
-- For development we will no longer skip any dates so we can see all the models
-- for all dates.
--      skip = g_army_id_selected
    end

    for year,army_id in pairs(dates_for_army) do
        if skip ~= army_id then
          index = index + 1
          table.insert(options, year)
          if year == year_selected then
            selected = year
            selected_index = index
          end
        end
    end
    if selected == nil then
      selected = options[1]
      selected_index = 1
    end
    g_game_settings['year_selected'][color] = selected
    local menu_id = 'dropdown_year_' .. color
    set_options_dropdown_by_id_xml(xml, menu_id, options, selected_index)
end


-- Return the ID to use for an army for an ally when referencing armies[]
-- army_id: Identity pf the army that has an ally
-- ally_id: Identify of the ally
-- return: identifier to use in armies[]
function get_ally_army_id(army_id, ally_id)
  if g_game_settings['is_grand_triumph'] then
    return ally_id
  end
  return army_id .. "_ally_" .. ally_id
end

-- Ally army id based on the UI id
g_allies_menu = {}
g_allies_menu['red'] = {}
g_allies_menu['blue'] = {}


-- player: 'red' or 'blue'
-- value: 'True' to indicate that the ally was selected, "False" to
-- indicate deselection.
-- id: UI id of the ally that was selected, not the army id
function do_on_toggle_ally_army(color, value, id)
  if g_ui_busy then
    print_important('UI is updating, please try again')
    return
  end
  if value == "True" then
    local army_id_selected = g_game_settings['army_id'][color]
    local ally_army_id = g_allies_menu[color][id]
    g_game_settings['selected_allies'] [color][id] = ally_army_id
  else
    g_game_settings['selected_allies'] [color][id] = nil
  end
end


function on_toggle_ally_army_red(player, value, id)
  do_on_toggle_ally_army('red', value, id)
end

function on_toggle_ally_army_blue(player, value, id)
  do_on_toggle_ally_army('blue', value, id)
end


-- color: 'red' or 'blue'
function update_allies_menu(color)
  assert((color == "red") or (color == "blue"))
  local army_id_selected = g_game_settings['army_id'][color]
  local year_selected = g_game_settings['year_selected'][color]
  local date_range = army_dates[army_id_selected][year_selected]
  g_allies_menu[color] = {}
  local selected = {}
  local entry=1
  if g_game_settings['is_grand_triumph'] then
    local army_name = army[army_id_selected]['data']['name']

    local ui_id = "toggle_ally_army_" .. color .. "_" .. tostring(entry)
    UI.setAttribute(ui_id, "text", army_name)
    UI.setAttribute(ui_id, "active", true)
    if g_game_settings['selected_allies'][color][ui_id] == army_id_selected then
      UI.setAttribute(ui_id, "isOn", "true")
      selected[ui_id] = army_id_selected
    else
      UI.setAttribute(ui_id, "isOn", "false")
    end
    g_allies_menu[color][ui_id] = army_id_selected
    entry = entry + 1

    local ui_id = "toggle_ally_army_" .. color .. "_" .. tostring(entry)
    UI.setAttribute(ui_id, "text", army_name)
    UI.setAttribute(ui_id, "active", true)
    if g_game_settings['selected_allies'][color][ui_id] == army_id_selected then
      UI.setAttribute(ui_id, "isOn", "true")
      selected[ui_id] = army_id_selected
    else
      UI.setAttribute(ui_id, "isOn", "false")
    end
    g_allies_menu[color][ui_id] = army_id_selected
    entry = entry + 1
  end
  for _, ally in ipairs(allies[army_id_selected]) do
    if date_ranges_intersect( date_range, ally['dateRange']) then
      local ally_id = get_ally_army_id(army_id_selected, ally['id'])
      local ally_army = army[ally_id]
      if nil == ally_army then
        print_error("Cannot find army " .. tostring(ally_id))
      else
        local ally_army_data = ally_army['data']
        local ally_army_name = ally_army_data['name']
        local ui_id = "toggle_ally_army_" .. color .. "_" .. tostring(entry)
        UI.setAttribute(ui_id, "text", ally_army_name)
        UI.setAttribute(ui_id, "active", true)
        if g_game_settings['selected_allies'][color][ui_id] == ally_id then
          UI.setAttribute(ui_id, "isOn", "true")
          selected[ui_id] = ally_id
        else
          UI.setAttribute(ui_id, "isOn", "false")
        end
        g_allies_menu[color][ui_id] = ally_id
        entry = entry + 1
      end
    end
  end
  while entry <= 15 do
    local ui_id = "toggle_ally_army_" .. color .. "_" .. tostring(entry)
    UI.setAttribute(ui_id, "active", false)
    UI.setAttribute(ui_id, "isOn", "false")
    entry = entry + 1
  end
  g_game_settings['selected_allies'][color] = selected
end

function on_theme_selected(player, value, id)
  if g_ui_busy then
    print_important('UI is updating, please try again')
    return
  end
    g_theme_selected = value
    on_next_frame(function()
        update_deploy_army_dialog()
    end)
end


-- color: 'red' or 'blue'
-- value: index in the army menu of the selected item
function do_on_army_selected(color, value)
  if g_ui_busy then
    print_important('UI is updating, please try again')
    return
  end
    local army = armies[g_theme_selected][value]
    assert(army ~= nil)
    assert(army.data ~= nil)
    assert(army.data.id ~= nil)
    g_game_settings['army_id'][color] = army.data.id
    on_next_frame(function()
        update_deploy_army_dialog()
    end)
end

function on_army_selected_red(player, value, id)
  do_on_army_selected('red', value)
end

function on_army_selected_blue(player, value, id)
  do_on_army_selected('blue', value)
end


-- Display value in UI for the year that has been chossen to deploy.
function on_year_selected_blue(player, value, id)
  if g_ui_busy then
    print_important('UI is updating, please try again')
    return
  end
  g_game_settings['year_selected']['blue'] = value
  update_deploy_army_dialog()
end

-- Display value in UI for the year that has been chossen to deploy.
function on_year_selected_red(player, value, id)
  if g_ui_busy then
    print_important('UI is updating, please try again')
    return
  end
  g_game_settings['year_selected']['red'] = value
  update_deploy_army_dialog()
end



function add_pip(player, value, id)
    if value == 'red' then
        local pips_red = tonumber(UI.getValue('text_pips_player_red'))
        if pips_red < 6 then
            pips_red = pips_red + 1
        end
        UI.setValue('text_pips_player_red', pips_red)
    else
        local pips_blue = tonumber(UI.getValue('text_pips_player_blue'))
        if pips_blue < 6 then
            pips_blue = pips_blue + 1
        end
        UI.setValue('text_pips_player_blue', pips_blue)
    end
end

function remove_pip(player, value, id)
    if value == 'red' then
        local pips_red = tonumber(UI.getValue('text_pips_player_red'))
        if pips_red > 0 then
            pips_red = pips_red - 1
        end
        UI.setValue('text_pips_player_red', pips_red)
    else
        local pips_blue = tonumber(UI.getValue('text_pips_player_blue'))
        if pips_blue > 0 then
            pips_blue = pips_blue - 1
        end
        UI.setValue('text_pips_player_blue', pips_blue)
    end
end

-- Global enabled or disabled ZOC
g_zoc_enabled = false
function on_toggle_zoc(player, value, id)
    g_zoc_enabled = value == "True"
    zoc_invalidate_cache()

    if g_zoc_enabled then
        UI.setValue('toggle_zoc', 'Show ZOC')
    else
        UI.setValue('toggle_zoc', 'Do not show ZOC')
    end

    -- Make it consistent for all players
    on_next_frame(function()
        UI.setAttribute('toggle_zoc', 'isOn', g_zoc_enabled)
    end)
end



function on_toggle_table_type(player, value, id)
    g_game_settings["table type"] = tonumber(value)
end

function from_toggle_number_to_table_type(value)
    -- Must follow the order of the toggles on main.xml
    if value == 0 then
        return 'grass'
    elseif value == 1 then
        return 'forest'
    elseif value == 2 then
        return 'tropical'
    elseif value == 3 then
        return 'mountain'
    elseif value == 4 then
        return 'desert'
    elseif value == 5 then
        return 'steppe'
    elseif value == 6 then
        return 'delta'
    elseif value == 7 then
        return 'marsh'
    else
        print_error("topography_index value is invalid " .. tostring(value))
        return 'Error'
    end
end

function load_table(topography_index)
    local type = from_toggle_number_to_table_type(topography_index)

    if tables[type] == nil then
        type = 'grass'
    end
    local tex = tables[type]['table_tex']

    if g_current_table == nil then
        if g_game_settings['is_grand_triumph'] then
            spawn_table_obj(tables['model_double'], tex)
        else
            spawn_table_obj(tables['model'], tex)
        end
        change_bases_to_terrain(type)
    else
        print_warning('There\'s already a table spawned')
    end

end


function on_push_back(player, value, id)
    local objs = filter_bases(player.getSelectedObjects())
    local len = tlen(objs)
    if len < 1 then
        print_warning(player.steam_name .. ' is pushing back troops but doesn\'t have any base selected')
        return
    end

    if len == 1 then
        local obj = table.remove(objs, 1)
        push_back(obj)
        draw_all_gizmos()
        return
    end

    push_back_column(objs)
    draw_all_gizmos()
end

g_player_wheeling = nil
function on_wheel(player, value, id)
    local objs = filter_bases(player.getSelectedObjects())
    local len = tlen(objs)
    if len < 1 then
        print_warning(player.steam_name .. ' is wheeling troops but doesn\'t have any base selected')
        return
    end

    on_rotation_wheel_ui(15)
    on_change_orientation_wheel_ui('left')
    local distance = preview_wheel(objs)
    if distance < 0 then
        print_warning(player.steam_name .. ' is wheeling troops but doesn\'t have a valid group selected')
        return
    end
    g_player_wheeling = player.color
end

function preview_wheel(objs_if_first_time)
    local distance = wheel_group(objs_if_first_time,
        math.rad(g_degrees_wheeling), g_current_orientation)

    if distance < 0 then
        return distance
    end

    local mu = inches_to_mu_display_string(distance)
    UI.setValue('text_wheeling',
        string.format('Wheeling %.0f degrees will cost %s',
            g_degrees_wheeling,
            mu))
    return distance
end

function on_make_wheeling(player, value, id)
    perform_wheels()
    g_current_wheel_group = nil
    g_current_wheel_transforms = nil
    g_current_wheel_newtransforms = nil
    g_player_wheeling = nil

    Global.setVectorLines({})
end

function on_cancel_wheeling(player, value, id)
    g_current_wheel_group = nil
    g_current_wheel_transforms = nil
    g_current_wheel_newtransforms = nil
    g_player_wheeling = nil

    Global.setVectorLines({})
end

g_degrees_wheeling = 0
function on_rotation_wheel(player, value, id)
    on_rotation_wheel_ui(value)
    preview_wheel(nil)
end

function on_rotation_wheel_ui(value)
    g_degrees_wheeling = value
    Wait.frames(function()
        UI.setAttribute('slider_wheel_rotation', 'value', value)
    end, 1)
end

g_current_orientation = 'left'
function on_change_orientation_wheel(player, value, id, ignore_preview)
    on_change_orientation_wheel_ui(from_toggle_number_to_orientation(tonumber(value)))
    preview_wheel(nil)

end

function on_change_orientation_wheel_ui(value)
    g_current_orientation = value
    if value == 'left' then
        Wait.frames(function()
            UI.setAttribute('toggle_wheel_left', 'isOn', true)
        end, 1)
    else
        Wait.frames(function()
            UI.setAttribute('toggle_wheel_right', 'isOn', true)
        end, 1)
    end
end


function from_toggle_number_to_orientation(value)
    -- Must follow the order of the toggles on main.xml
    if value == 0 then
        return 'left'
    elseif value == 1 then
        return 'right'
    else
        return 'Error'
    end
end

-- Global enabled snapping
g_snap_mode_enabled = true
function on_toggle_snapping(player, value, id)
    g_snap_mode_enabled = value == "True"

    if g_snap_mode_enabled then
        UI.setValue('toggle_snapping', 'Snap bases')
    else
        UI.setValue('toggle_snapping', 'Do not snap bases')
    end

    -- Make it consistent for all players
    on_next_frame(function()
        UI.setAttribute('toggle_snapping', 'isOn', g_snap_mode_enabled)
    end)
end

function update_pip(dice_obj_guid, id_text)
    local val = math.random(1,6)
    UI.setValue(id_text, val)
    getObjectFromGUID(dice_obj_guid).setValue(val)

    return val
end


function on_roll_pips_red(player, value, id)
  if not  g_game_settings['is_grand_triumph'] then
    do_roll_pips({'red'})
  else
    do_roll_pips({'red', 'orange', 'yellow'})
  end
end

function on_roll_pips_blue(player, value, id)
  if not  g_game_settings['is_grand_triumph'] then
    do_roll_pips({'blue'})
  else
    do_roll_pips({'blue', 'green', 'purple'})
  end
end

function on_undo_move(player, value, id)
    go_back_history_stack()
end

function on_redo_move(player, value, id)
    go_forward_history_stack()
end

function update_current_ui()
  if not(g_game_settings['wizard_page'] == "none") then
    UI.setAttribute('panel_dba_orders_bg', 'active', false)
    UI.setAttribute('panel_dba_orders', 'active', false)
    UI.setAttribute('panel_current_movement', 'active', false)
    UI.setAttribute('panel_wheel', 'active', false)
  elseif g_current_wheel_group ~= nil  then
    UI.setAttribute('panel_dba_orders_bg', 'active', true)
    UI.setAttribute('panel_dba_orders', 'active', false)
    UI.setAttribute('panel_current_movement', 'active', false)
    UI.setAttribute('panel_wheel', 'active', true)
  elseif g_picked_base_objects ~= nil and  not is_table_empty(g_picked_base_objects) then
    UI.setAttribute('panel_dba_orders_bg', 'active', true)
    UI.setAttribute('panel_dba_orders', 'active', false)
    UI.setAttribute('panel_current_movement', 'active', true)
    UI.setAttribute('panel_wheel', 'active', false)
    update_movement_panel()
  else
    UI.setAttribute('panel_dba_orders_bg', 'active', true)
    UI.setAttribute('panel_dba_orders', 'active', true)
    UI.setAttribute('panel_current_movement', 'active', false)
    UI.setAttribute('panel_wheel', 'active', false)
  end
end

function update_movement_panel()
    -- display the maxumum movement
    -- since all bases are picked up at the same time and moved in the
    -- same way any base is ok to use.
    local base, transform = first_key_value_table(g_picked_base_objects)
    local new_corners = compute_corners_base(base)
    local distance_inches = max_distance_between_bases_front_corners(
        new_corners, transform['corners'])
    local mu = inches_to_mu_display_string(distance_inches)
    UI.setValue('text_current_movement_MUs',
        'Current movement: ' .. mu)
end
