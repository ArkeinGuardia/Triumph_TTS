g_wizard_exit_panel_fn = nil

function wizard_show()
  UI.setAttribute("panel_wizard_bg", "active", true)
  update_current_ui()

  wizard_show_panel_game()
end


wizard_panels = {
  "wizard_panel_game",
  "wizard_panel_select_armies",
  "wizard_panel_select_troops",
   "wizard_panel_invader",
   "wizard_panel_topography",
   "wizard_panel_tactical_advantage",
  -- "wizard_panel_terrain_pieces_roll",
  -- "wizard_panel_select_terrain_nb_pieces",
  -- "wizard_panel_order_terrain_pieces",
  -- "wizard_panel_camps",
  -- "wizard_panel_deploy_troops",
  -- "wizard_panel_first_turn",
}

function wizard_show_panel(panel_name)
  if g_wizard_exit_panel_fn then
    g_wizard_exit_panel_fn()
    g_wizard_exit_panel_fn = nil
  end
  for _,name in pairs(wizard_panels) do
    UI.setAttribute(name, "active", name == panel_name)
  end
end

function wizard_hide()
  wizard_show_panel(nil)
  UI.setAttribute("panel_wizard_bg", "active", false)
  g_game_settings['show_wizard'] = false
  update_current_ui()
end


-------------------
------------------- Game Panel
-------------------

function wizard_show_panel_game()
  wizard_show_panel("wizard_panel_game")
  wizard_panel_game_enter()
end

function wizard_pannel_game_update()
  local is_grand_triumph = g_game_settings['is_grand_triumph']
  if is_grand_triumph == nil then
    UI.setAttribute("wizard_togglegroup_game_triumph", "isOn", false)
    UI.setAttribute("wizard_togglegroup_game_grand_triumph", "isOn", false)
    return
  end

  UI.setAttribute("wizard_togglegroup_game_triumph", "isOn", not is_grand_triumph)
  UI.setAttribute("wizard_togglegroup_game_grand_triumph", "isOn", is_grand_triumph)
end

function wizard_panel_game_enter()
  wizard_pannel_game_update()
  g_wizard_exit_panel_fn = function()
    spawn_all_dice()
  end
end

function on_wizard_togglegroup_game(player, value, id)
  g_game_settings['is_grand_triumph'] = (value == "1")
  wizard_pannel_game_update()
end

function on_wizard_button_forward_to_select_armies()
      wizard_show_panel_select_armies()
end

-------------------
------------------- Select armies
-------------------

function wizard_show_panel_select_armies()
  wizard_show_panel("wizard_panel_select_armies")
end

function on_wizard_panel_select_armies_previous()
  wizard_show_panel_game()
end

function on_wizard_panel_select_armies_next()
  wizard_show_panel_select_troops()
end

-------------------
------------------- Select troops
-------------------

function wizard_show_panel_select_troops()
  wizard_show_panel("wizard_panel_select_troops")
  g_wizard_exit_panel_fn = function()
    -- make the bases visible to everyone
    for _, base in pairs(get_all_bases()) do
      base.setInvisibleTo({})
    end
    g_movement_reporting_enabled = true
  end

  -- make the bases invisible to the other player
  g_movement_reporting_enabled = false
  for _, base in pairs(get_all_bases()) do
    if is_base_blue_player(base) then
      base.setInvisibleTo({"Red"})
    else
      base.setInvisibleTo({"Blue"})
    end
  end
end


function on_wizard_panel_select_troops_previous()
  wizard_show_panel_select_armies()
end


function on_wizard_panel_select_troops_next()
  wizard_show_panel_invader()
end

-------------------
------------------- Invader
-------------------

function wizard_show_panel_invader()
  wizard_show_panel("wizard_panel_invader")
  g_wizard_exit_panel_fn = wizard_panel_exit_invader
  wizard_panel_invader_set_ratings()
  g_dice_callbacks['invasion_dice_rolled'] = on_invasion_dice_rolled
  update_invasion_wizard_page()
end


function wizard_panel_exit_invader()
  g_dice_callbacks["invasion_dice_rolled"] = nil
end

-- Disable the invasion ratings that do not apply to an army.
-- color: Player color for the army
function wizard_panel_invader_set_ratings_for_color(color)
  local army_id = g_game_settings['army_id'] [color]
  local army = army[army_id]
  local data = army['data']
  local invasionRatings = data['invasionRatings']
  for i=0,5,1 do
    local id = "wizard_togglegroup_invasion_" .. color .. "_" .. tostring(i)
    UI.setAttribute(id, "active", "false")
  end
  for _,value in ipairs(invasionRatings) do
    local id = "wizard_togglegroup_invasion_" .. color .. "_" .. tostring(value)
    UI.setAttribute(id, "active", "true")
  end
end

-- Disable the invastion ratings that do not apply for the armies selected.
function wizard_panel_invader_set_ratings()
  wizard_panel_invader_set_ratings_for_color('red')
  wizard_panel_invader_set_ratings_for_color('blue')
end

function on_invasion_dice_rolled(dice_color, value)
  local id = "text_" .. dice_color .. "_invasion_roll_value"
  UI.setAttribute(id, "text", tostring(value))
  update_invasion_wizard_page()
end

function on_button_red_invasion_roll()
  roll_dice('red')
end

function on_button_blue_invasion_roll()
  roll_dice('blue')
end

function on_red_invasion_rating_selected(player, value, id)
  local rating = tonumber(value)
  g_game_settings['invasion_rating']['red'] = rating
  update_invasion_wizard_page()
end

function on_blue_invasion_rating_selected(player, value, id)
  local rating = tonumber(value)
  g_game_settings['invasion_rating']['blue'] = rating
  update_invasion_wizard_page()
end

-- Update the score box for the invasion wizard
-- color: "red" or "blue"
-- return: total or nil if the value is not yet ready
function update_invasion_wizard_score(color)
  local score_id = color .. "_invasion_score"
  local dice_id = "text_" .. color .. "_invasion_roll_value"
  local dice_str = UI.getAttribute(dice_id, "text")
  local dice = tonumber(dice_str)
  if dice == nil then
    UI.setAttribute(score_id, "text", "")
    return nil
  end
  if g_game_settings['invasion_rating'][color] == nil then
    return nil
  end

   local rating = g_game_settings['invasion_rating'][color]
   if rating == nil then
     UI.setAttribute(score_id, "text", "")
     return nil
   end

   local score = dice + rating
   UI.setAttribute(score_id, "text", tostring(score))
   return score
end

function do_update_invasion_wizard_page()
  local red_score = update_invasion_wizard_score("red")
  local blue_score = update_invasion_wizard_score("blue")
  if red_score == nil or blue_score == nil then
    UI.setAttribute("invader", "text", "")
    UI.setAttribute("wizard_panel_invader_next", "interactable", false)
    return
  end
  if red_score == blue_score then
    UI.setAttribute("invader", "text", "tie, roll again")
    UI.setAttribute("text_blue_invasion_roll_value", "text", "")
    UI.setAttribute("text_red_invasion_roll_value", "text", "")
    UI.setAttribute("wizard_panel_invader_next", "interactable", false)
    g_game_settings['invader']=nil
    return
  end
  UI.setAttribute("wizard_panel_invader_next", "interactable", true)
  if red_score > blue_score then
    UI.setAttribute("invader", "text", "Red invades")
    g_game_settings['invader'] = "red"
    print_info("Red invades")
    g_game_settings['invader']="red"
    return
  end
  UI.setAttribute("invader", "text", "Blue invades")
  g_game_settings['invader'] = "blue"
  print_info("Blue invades")
  g_game_settings['invader']="blue"
end


function update_invasion_wizard_page()
  -- Need to wait one frame for the UI elements to update
  -- before we can query them
  Wait.frames(
    function()
      do_update_invasion_wizard_page()
    end,
    1)
end

function on_wizard_panel_invader_next()
  wizard_show_panel_topography()
end

function on_wizard_panel_invader_previous()
  wizard_show_panel_select_troops()
end

-------------------
------------------- Topography
-------------------

g_topographies = {'arable', 'forest', 'hilly', 'dry', 'steepe', 'marsh', 'delta'}

function wizard_show_panel_topography()
  wizard_show_panel("wizard_panel_topography")
  local defender
  if g_game_settings['invader']=='blue' then
    defender = 'red'
  else
    defender = 'blue'
  end
  UI.setAttribute("wizard_topgraphy_defender", "text", defender)
  local army_id = g_game_settings['army_id'] [defender]
  local army = army[army_id]
  local data = army['data']
  local homeTopographies =  data['homeTopographies']
  for _,topo in ipairs(g_topographies) do
      local active =  find_in_array(homeTopographies, topo, str_equals_case_insensitive)
      local id = "wizard_topography_" .. topo
      UI.setAttribute(id, "active", tostring(active))
  end
  wizard_panel_topography_update()
end

function on_wizard_togoraphy_selected(player, value, id)
  g_game_settings['table_spawned'] = (value == tonumber(g_current_table_type))
  g_current_table_type = tonumber(value)
  wizard_panel_topography_update()
end

function on_wizard_panel_topography_spawn_table()
  load_table(g_current_table_type)
  g_game_settings['table_spawned'] = true
  g_game_settings['topography'] = g_topographies[g_current_table_type]
  wizard_panel_topography_update()
end

function wizard_panel_topography_update()
  UI.setAttribute("wizard_panel_topography_next", "interactable",
    g_game_settings['table_spawned'])

end

function on_wizard_panel_topography_previous()
  wizard_show_panel_topography()
end

function on_wizard_panel_topography_next()
  wizard_show_panel_tatical_advantage()
end


-------------------
------------------- Tatucal Advantage
-------------------

function wizard_show_panel_tatical_advantage()
  wizard_show_panel("wizard_panel_tactical_advantage")
  wizard_panel_tatical_advantage_update_manueuver_ratings()
  g_dice_callbacks['tatical_advantage_dice_rolled'] = on_tactical_advantage_dice_rolled
  g_wizard_exit_panel_fn = wizard_panel_exit_invader
end

function wizard_panel_exit_invader()
  g_dice_callbacks["tactical_advantage_dice_rolled"] = nil
end

function on_wizard_panel_tactical_advantage_previous()
  wizard_show_panel_topography()
end

function on_wizard_panel_tactical_advantage_next()
  wizard_hide()
end

function on_tactical_advantage_dice_rolled(dice_color, value)
  local id = "wizard_maneuver_roll_value_" .. dice_color
  UI.setAttribute(id, "text", tostring(value))
  g_game_settings[id] = value
  wizard_panel_tatical_advantage_update()
end

function on_wizard_red_maneuver_rating_selected(player, value, id)
  print_info("Red maneuver rating " .. tostring(value))
  local maneuverRatings =  get_maneuver_ratings_for_color('red')
  local rating = maneuverRatings[value]
  g_game_settings['wizard_maneuver_rating_red'] = rating
  set_maneuver_rating_selected(id, rating)
  wizard_panel_tatical_advantage_update()
end

function on_wizard_blue_maneuver_rating_selected(player, value, id)
  print_info("Blue maneuver rating " .. tostring(value))
  local maneuverRatings =  get_maneuver_ratings_for_color('blue')
  local rating = maneuverRatings[value]
  g_game_settings['wizard_maneuver_rating_blue'] = rating
  set_maneuver_rating_selected(id, rating)
  wizard_panel_tatical_advantage_update()
end

function on_wizard_button_red_maneuver_roll()
  roll_dice('red')
end

function on_wizard_button_blue_maneuver_roll()
  roll_dice('blue')
end

-- color: either "blue" or "red"
function get_maneuver_ratings_for_color(color)
  local army_id = g_game_settings['army_id'] [color]
  local army = army[army_id]
  local data = army['data']
  local maneuverRatings =  data['maneuverRatings']
  return maneuverRatings
end

-- xml: XML table to modify
-- color:  Color of the player whose maneuver rating we are updating
-- either 'blue' or 'red'
function wizard_tatical_advantage_update_maneuver_rating(xml, color)
  local maneuverRatings =  get_maneuver_ratings_for_color(color)
  local menu_id = "wizard_maneuver_rating_" .. color
  local options = {}
  local selected_index = nil
  for index,maneuverRating in ipairs(maneuverRatings) do
    table.insert(options, tostring(maneuverRating))
    if g_game_settings[menu_id] == maneuverRating then
      selected_index = index
    end
  end
  if selected_idex == nil then
    selected_index = 1
    g_game_settings[menu_id] = maneuverRatings[selected_index]
  end
  set_options_dropdown_by_id_xml(xml, menu_id, options, selected_index)
end


function wizard_panel_tatical_advantage_update_manueuver_ratings()
  local xml = UI.getXmlTable()
  wizard_tatical_advantage_update_maneuver_rating(xml, "red")
  wizard_tatical_advantage_update_maneuver_rating(xml, "blue")
  UI.setXmlTable(xml)
end

function wizard_update_flank_march_for_color(color)
  local flank_id = color .. "_flank_march"
  if g_game_settings[flank_id] ~= nil then
    return
  end
  local rating_id = "wizard_maneuver_rating_" .. color
  local maneuver_rating = g_game_settings[rating_id]
  if maneuver_rating == nil then
    return
  end
  local dice_id = "wizard_maneuver_roll_value_" .. color
  local dice = g_game_settings[dice_id]
  if dice == nil then
    return
  end
  local flank = ((dice == 1) or (dice < maneuver_rating))

  g_game_settings[flank_id] = flank
  local wizard_id = "wizard_" .. flank_id
  if flank then
    UI.setAttribute(wizard_id, "text", "Flank March")
    print_info(color .. " is eligible for flank march.")
    local face_URL
    local z_pos = 35.50
    local y_rotation = 0
    if color == "red" then
      face_URL="http://cloud-3.steamusercontent.com/ugc/1807610517240746012/48DD837201B66B45C44C45CB86585773540F54DF/"
      z_pos = -z_pos
      y_rotation = 180
    else
      face_URL="http://cloud-3.steamusercontent.com/ugc/1807610517240745877/939F09683E86259AB2F0D92A721F0C173651C78C/"
    end
    local flank_card_data =
     {
       Name= "CardCustom",
       Transform= {
         posX= 0,
         posY= 3.01,
         posZ= z_pos,
         rotX= 0,
         rotY= y_rotation,
         rotZ= 180.0,
         scaleX= 1.87838769,
         scaleY= 1.0,
         scaleZ= 1.87838769
       },
       ColorDiffuse= {
         r= 1.0,
         g= 0.0,
         b= 0.0
       },
     }
    local flank_card= spawnObjectData( { data=flank_card_data})
    flank_card.setCustomObject( {
       type=1,
       face=face_URL,
       back=face_URL } )
  else
    UI.setAttribute(wizard_id, "text", "")
    print_info("No flank march for " .. color)
  end
end

-- Update the score box for the tactical advanage  wizard
-- color: "red" or "blue"
-- return: total or nil if the value is not yet ready
function update_tactical_maneuver_wizard_score(color)
  local score_id = "wizard_" .. color .. "_maneuver_score"
  local rating_id = "wizard_maneuver_rating_" .. color
  local rating = g_game_settings[rating_id]
  if rating == nil then
    UI.setAttribute(score_id, "text", "")
    return nil
  end

  local dice_id = "wizard_maneuver_roll_value_" .. color
  local dice = g_game_settings[dice_id]
  if dice == nil then
    UI.setAttribute(score_id, "text", "")
    return nil
  end

  local score = dice + rating
  UI.setAttribute(score_id, "text", tostring(score))
  return score
end

function do_update_tactical_advantage_wizard_page()

  local red_score = update_tactical_maneuver_wizard_score("red")
  local blue_score = update_tactical_maneuver_wizard_score("blue")
  wizard_update_flank_march_for_color('red')
  wizard_update_flank_march_for_color('blue')
  if red_score == nil or blue_score == nil then
    UI.setAttribute("wizard_text_tatical_advantage_player", "text", "")
      UI.setAttribute("wizard_text_tatical_advantage_score", "text", "")
      UI.setAttribute("wizard_panel_tactical_advantage_next", "interactable", false)
      return
  end
  if red_score == blue_score then
    UI.setAttribute("wizard_text_tatical_advantage_player", "text", "tie, roll again")
    UI.setAttribute("wizard_maneuver_roll_value_red", "text", nil)
    UI.setAttribute("wizard_maneuver_roll_value_blue", "text", nil)
    UI.setAttribute("wizard_panel_tactical_advantage_next", "interactable", false)
    return
  end
  local advantage = math.abs(red_score - blue_score)
  g_game_settings["tatical_advantage_score"] = advantage
  UI.setAttribute("wizard_text_tatical_advantage_score", "text", tostring(advantage))
  if red_score > blue_score then
      UI.setAttribute("wizard_text_tatical_advantage_player", "text", "Red tactical advantage: ")
      g_game_settings['tactical_advantage'] = "red"
  else
     UI.setAttribute("wizard_text_tatical_advantage_player", "text", "Blue tactical advantage: ")
     g_game_settings['tactical_advantage'] = "blue"
  end
  UI.setAttribute("wizard_panel_tactical_advantage_next", "interactable", true)
  print_important("tatical advantage " .. g_game_settings['tactical_advantage'] ..
    ' ' .. tostring(g_game_settings["tatical_advantage_score"]))
end

function wizard_panel_tatical_advantage_update()
  -- Need to wait one frame for the UI elements to update
  -- before we can query them
  Wait.frames(
    function()
      do_update_tactical_advantage_wizard_page()
    end,
    1)
end
